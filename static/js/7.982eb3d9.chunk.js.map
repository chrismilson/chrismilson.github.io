{"version":3,"sources":["ui/components/Wallpaper/common/random.ts","../node_modules/react-hooks-use-canvas-size/lib/index.es.js","../node_modules/react-hooks-use-drawing-canvas/lib/index.es.js","ui/components/Wallpaper/common/Wallpaper.tsx","ui/components/Wallpaper/GameOfLife/Cell.ts","ui/components/Wallpaper/GameOfLife/Game.ts","ui/components/Wallpaper/GameOfLife/index.tsx"],"names":["randomInt","from","to","Math","floor","random","randomRange","useCanvasSize","canvasRef","useState","width","height","size","setSize","useEffect","current","getSize","offsetWidth","offsetHeight","window","addEventListener","removeEventListener","useDrawingCanvas","draw","ref","useRef","context","setContext","getContext","useLayoutEffect","canvas","prefersReducedMotion","matchMedia","matches","CanvasWallpaper","props","className","pixelated","classNames","undefined","push","join","Cell","initiallyAlive","status","neighbors","this","neighbor","reduce","s","n","isAlive","Game","board","i","j","dx","dy","x","y","addNeighbor","ctx","save","fillStyle","fillRect","restore","forEach","row","cell","check","age","swap","widthPX","heightPX","setTransform","globalAlpha","game","clearRect","move","interval","setInterval","clearInterval","GameOfLife"],"mappings":"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","file":"static/js/7.982eb3d9.chunk.js","sourcesContent":["/**\n * Returns a random integer between two numbers, or if there is only one number,\n * between zero and that number.\n *\n * @param from The lower bound\n * @param to The upper bound\n */\nexport const randomInt = (from: number, to: number = from) => {\n  if (from === to) from = 0\n  return from + Math.floor(Math.random() * (to - from))\n}\n\n/**\n * Returns a random float in a given range.\n */\nexport const randomRange = (from: number, to: number) => {\n  return from + Math.random() * (to - from)\n}\n\n/** Returns a random normally distributed float */\nexport const randomNormal = (mean = 0, stddev = 1) => {\n  let u = 0\n  let v = 0\n  while (u === 0) u = Math.random()\n  while (v === 0) v = Math.random()\n  const statistic = Math.sqrt(-2 * Math.log(u)) + Math.cos(2 * Math.PI * v)\n  return statistic * stddev + mean\n}\n","import { useState, useEffect } from 'react';\n\n/**\r\n * Provides the width and height of a referenced canvas in the dom.\r\n *\r\n * ***Note:*** this method assumes the width and height of the canvas will not\r\n * change unless the window width has changed.\r\n *\r\n * @param canvasRef A reference to the canvas element.\r\n */\r\nfunction useCanvasSize(canvasRef) {\r\n    const [size, setSize] = useState({ width: 0, height: 0 });\r\n    useEffect(() => {\r\n        if (!canvasRef.current)\r\n            return;\r\n        const getSize = () => {\r\n            const width = canvasRef.current.offsetWidth;\r\n            const height = canvasRef.current.offsetHeight;\r\n            setSize({ width, height });\r\n        };\r\n        getSize();\r\n        window.addEventListener('resize', getSize);\r\n        return () => window.removeEventListener('resize', getSize);\r\n    }, [canvasRef]);\r\n    return size;\r\n}\n\nexport default useCanvasSize;\n","import { useRef, useState, useEffect, useLayoutEffect } from 'react';\nimport useCanvasSize from 'react-hooks-use-canvas-size';\n\n/**\r\n * Provides an api for getting a 2d context from a canvas element.\r\n *\r\n * The returned reference should be assigned to a canvas element. The drawing\r\n * method will then be called with a context on the referenced canvas.\r\n *\r\n * Be careful about defining the drawing method. If it is defined inline, then\r\n * it will be re-called on every render.\r\n *\r\n * ```ts\r\n * // defines a new drawing function on every render\r\n * const Component = () => {\r\n *   const canvasRef = useDrawingCanvas(ctx => ctx.fillRect(0, 0, 10, 10))\r\n *\r\n *   return <canvas ref={canvasRef} />\r\n * }\r\n *\r\n * // safer\r\n * const draw = ctx => ctx.fillRect(0, 0, 10, 10)\r\n *\r\n * const Component = () => {\r\n *   const canvasRef = useDrawingCanvas(draw)\r\n *\r\n *   return <canvas ref={canvasRef} />\r\n * }\r\n * ```\r\n *\r\n * @param draw The drawing method\r\n */\r\nfunction useDrawingCanvas(draw) {\r\n    const ref = useRef();\r\n    const [context, setContext] = useState();\r\n    const { width, height } = useCanvasSize(ref);\r\n    useEffect(() => {\r\n        if (!ref.current)\r\n            return;\r\n        setContext(ref.current.getContext('2d'));\r\n    }, [ref]);\r\n    useLayoutEffect(() => {\r\n        if (context) {\r\n            context.canvas.width = width;\r\n            context.canvas.height = height;\r\n            return draw(context, {\r\n                width,\r\n                height,\r\n                prefersReducedMotion: !window.matchMedia('(prefers-reduced-motion: no-preferece)').matches\r\n            });\r\n        }\r\n    }, [draw, context, width, height]);\r\n    return ref;\r\n}\n\nexport default useDrawingCanvas;\n","import React from 'react'\nimport useDrawingCanvas, { DrawingMethod } from 'react-hooks-use-drawing-canvas'\nimport './Wallpaper.css'\n\nexport type CanvasDrawingMethod = DrawingMethod\n\nexport const CanvasWallpaper: React.FC<{\n  /** extra classes for css */\n  className: string\n  draw: CanvasDrawingMethod\n  /** Render the canvas pixelated; without interpolation. Default: false */\n  pixelated?: boolean\n}> = props => {\n  const { draw, className, pixelated = false } = props\n  const canvasRef = useDrawingCanvas(draw)\n  const classNames = ['Wallpaper', 'Canvas']\n\n  if (className !== undefined) {\n    classNames.push(className)\n  }\n  if (pixelated) {\n    classNames.push('pixelated')\n  }\n\n  return <canvas className={classNames.join(' ')} ref={canvasRef} />\n}\n","export default class Cell {\n  private status: number\n  private neighbors: Cell[] = []\n\n  constructor(initiallyAlive: boolean) {\n    this.status = initiallyAlive ? 1 : 0\n  }\n\n  get isAlive() {\n    return this.status & 1\n  }\n\n  swap() {\n    this.status ^= 1\n  }\n\n  addNeighbor(neighbor: Cell) {\n    this.neighbors.push(neighbor)\n  }\n\n  check() {\n    const liveNeighbors = this.neighbors.reduce((s, n) => s + n.isAlive, 0)\n\n    if ((liveNeighbors | this.status) === 3) this.status |= 2\n  }\n\n  age() {\n    this.status = this.status >> 1\n  }\n}\n","import Cell from './Cell'\nimport { randomInt } from '../common/random'\n\nexport default class Game {\n  private width: number\n  private height: number\n  /**\n   * A cell is a number representing different states.\n   * The bits from least significan to most significant mean:\n   * - The cells current status.\n   * - The cells next status.\n   */\n  private board: Cell[][]\n\n  constructor(width: number, height: number) {\n    this.width = Math.floor(width)\n    this.height = Math.floor(height)\n    this.board = []\n\n    const probabilityOfLife = 0.1\n    for (let i = 0; i < this.width; i++) {\n      this.board[i] = []\n      for (let j = 0; j < this.height; j++) {\n        this.board[i][j] = new Cell(Math.random() < probabilityOfLife)\n      }\n    }\n\n    // addd the cell's neighbors\n    for (let i = 0; i < this.width; i++) {\n      for (let j = 0; j < this.height; j++) {\n        for (const [dx, dy] of [\n          [-1, -1],\n          [-1, 0],\n          [-1, 1],\n          [0, -1],\n          [0, 1],\n          [1, -1],\n          [1, 0],\n          [1, 1]\n        ]) {\n          const x = (i + dx + this.width) % this.width\n          const y = (j + dy + this.height) % this.height\n          this.board[i][j].addNeighbor(this.board[x][y])\n        }\n      }\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    for (let i = 0; i < this.width; i++) {\n      for (let j = 0; j < this.height; j++) {\n        if (this.board[i][j].isAlive) {\n          ctx.save()\n          ctx.fillStyle = `hsl(${randomInt(360)},100%,40%)`\n          ctx.fillRect(i, j, 1, 1)\n          ctx.restore()\n        }\n      }\n    }\n  }\n\n  move() {\n    this.board.forEach(row => row.forEach(cell => cell.check()))\n    this.board.forEach(row => row.forEach(cell => cell.age()))\n\n    const randomSwaps = 5\n    for (let i = 0; i < randomSwaps; i++) {\n      this.board[randomInt(this.width)][randomInt(this.height)].swap()\n    }\n  }\n}\n","import React from 'react'\nimport { CanvasWallpaper, CanvasDrawingMethod } from '../common/Wallpaper'\nimport Game from './Game'\n\nconst draw: CanvasDrawingMethod = (\n  ctx,\n  { width: widthPX, height: heightPX }\n) => {\n  // transform the canvas\n  const ratio = 4\n  const width = widthPX / ratio\n  const height = heightPX / ratio\n  ctx.setTransform(ratio, 0, 0, ratio, 0, 0)\n  ctx.globalAlpha = 0.2\n\n  const game = new Game(width, height)\n\n  const draw = () => {\n    ctx.clearRect(0, 0, width, height)\n\n    game.draw(ctx)\n    game.move()\n  }\n\n  const interval = setInterval(draw, 100)\n  return () => {\n    clearInterval(interval)\n  }\n}\n\nconst GameOfLife: React.FC = () => (\n  <CanvasWallpaper className=\"GameOfLife\" draw={draw} pixelated />\n)\n\nexport default GameOfLife\n"],"sourceRoot":""}