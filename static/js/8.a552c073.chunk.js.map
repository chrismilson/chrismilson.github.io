{"version":3,"sources":["ui/components/Wallpaper/common/random.ts","../node_modules/react-hooks-use-canvas-size/lib/index.es.js","../node_modules/react-hooks-use-drawing-canvas/lib/index.es.js","ui/components/Wallpaper/common/Wallpaper.tsx","ui/components/Wallpaper/Perspectives/index.tsx"],"names":["randomInt","from","to","Math","floor","random","randomRange","useCanvasSize","canvasRef","useState","width","height","size","setSize","useEffect","current","getSize","offsetWidth","offsetHeight","window","addEventListener","removeEventListener","useDrawingCanvas","draw","ref","useRef","context","setContext","getContext","useLayoutEffect","canvas","prefersReducedMotion","matchMedia","matches","CanvasWallpaper","props","className","pixelated","classNames","undefined","push","join","project","ctx","length","save","translate","x","y","moveTo","rotate","atan2","lineTo","restore","temp","setTransform","frame","centers","lines","offset","increment","separation","hue","lineWidth","lineCap","drawFrame","requestAnimationFrame","clearRect","strokeStyle","beginPath","forEach","center","closePath","stroke","line","cancelAnimationFrame","Perspectives"],"mappings":"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","file":"static/js/8.a552c073.chunk.js","sourcesContent":["/**\n * Returns a random integer between two numbers, or if there is only one number,\n * between zero and that number.\n *\n * @param from The lower bound\n * @param to The upper bound\n */\nexport const randomInt = (from: number, to: number = from) => {\n  if (from === to) from = 0\n  return from + Math.floor(Math.random() * (to - from))\n}\n\n/**\n * Returns a random float in a given range.\n */\nexport const randomRange = (from: number, to: number) => {\n  return from + Math.random() * (to - from)\n}\n\n/** Returns a random normally distributed float */\nexport const randomNormal = (mean = 0, stddev = 1) => {\n  let u = 0\n  let v = 0\n  while (u === 0) u = Math.random()\n  while (v === 0) v = Math.random()\n  const statistic = Math.sqrt(-2 * Math.log(u)) + Math.cos(2 * Math.PI * v)\n  return statistic * stddev + mean\n}\n","import { useState, useEffect } from 'react';\n\n/**\r\n * Provides the width and height of a referenced canvas in the dom.\r\n *\r\n * ***Note:*** this method assumes the width and height of the canvas will not\r\n * change unless the window width has changed.\r\n *\r\n * @param canvasRef A reference to the canvas element.\r\n */\r\nfunction useCanvasSize(canvasRef) {\r\n    const [size, setSize] = useState({ width: 0, height: 0 });\r\n    useEffect(() => {\r\n        if (!canvasRef.current)\r\n            return;\r\n        const getSize = () => {\r\n            const width = canvasRef.current.offsetWidth;\r\n            const height = canvasRef.current.offsetHeight;\r\n            setSize({ width, height });\r\n        };\r\n        getSize();\r\n        window.addEventListener('resize', getSize);\r\n        return () => window.removeEventListener('resize', getSize);\r\n    }, [canvasRef]);\r\n    return size;\r\n}\n\nexport default useCanvasSize;\n","import { useRef, useState, useEffect, useLayoutEffect } from 'react';\nimport useCanvasSize from 'react-hooks-use-canvas-size';\n\n/**\r\n * Provides an api for getting a 2d context from a canvas element.\r\n *\r\n * The returned reference should be assigned to a canvas element. The drawing\r\n * method will then be called with a context on the referenced canvas.\r\n *\r\n * Be careful about defining the drawing method. If it is defined inline, then\r\n * it will be re-called on every render.\r\n *\r\n * ```ts\r\n * // defines a new drawing function on every render\r\n * const Component = () => {\r\n *   const canvasRef = useDrawingCanvas(ctx => ctx.fillRect(0, 0, 10, 10))\r\n *\r\n *   return <canvas ref={canvasRef} />\r\n * }\r\n *\r\n * // safer\r\n * const draw = ctx => ctx.fillRect(0, 0, 10, 10)\r\n *\r\n * const Component = () => {\r\n *   const canvasRef = useDrawingCanvas(draw)\r\n *\r\n *   return <canvas ref={canvasRef} />\r\n * }\r\n * ```\r\n *\r\n * @param draw The drawing method\r\n */\r\nfunction useDrawingCanvas(draw) {\r\n    const ref = useRef();\r\n    const [context, setContext] = useState();\r\n    const { width, height } = useCanvasSize(ref);\r\n    useEffect(() => {\r\n        if (!ref.current)\r\n            return;\r\n        setContext(ref.current.getContext('2d'));\r\n    }, [ref]);\r\n    useLayoutEffect(() => {\r\n        if (context) {\r\n            context.canvas.width = width;\r\n            context.canvas.height = height;\r\n            return draw(context, {\r\n                width,\r\n                height,\r\n                prefersReducedMotion: !window.matchMedia('(prefers-reduced-motion: no-preferece)').matches\r\n            });\r\n        }\r\n    }, [draw, context, width, height]);\r\n    return ref;\r\n}\n\nexport default useDrawingCanvas;\n","import React from 'react'\nimport useDrawingCanvas, { DrawingMethod } from 'react-hooks-use-drawing-canvas'\nimport './Wallpaper.css'\n\nexport type CanvasDrawingMethod = DrawingMethod\n\nexport const CanvasWallpaper: React.FC<{\n  /** extra classes for css */\n  className: string\n  draw: CanvasDrawingMethod\n  /** Render the canvas pixelated; without interpolation. Default: false */\n  pixelated?: boolean\n}> = props => {\n  const { draw, className, pixelated = false } = props\n  const canvasRef = useDrawingCanvas(draw)\n  const classNames = ['Wallpaper', 'Canvas']\n\n  if (className !== undefined) {\n    classNames.push(className)\n  }\n  if (pixelated) {\n    classNames.push('pixelated')\n  }\n\n  return <canvas className={classNames.join(' ')} ref={canvasRef} />\n}\n","import React from 'react'\nimport { CanvasWallpaper, CanvasDrawingMethod } from '../common/Wallpaper'\nimport { randomInt } from '../common/random'\n\n/** Project a line of a set length from a point */\nconst project = (\n  ctx: CanvasRenderingContext2D,\n  from: { x: number; y: number },\n  to: { x: number; y: number },\n  length: number\n) => {\n  ctx.save()\n  ctx.translate(from.x, from.y)\n  ctx.moveTo(0, 0)\n  ctx.rotate(-Math.atan2(to.x - from.x, to.y - from.y))\n  ctx.lineTo(0, length)\n  ctx.restore()\n}\n\nconst draw: CanvasDrawingMethod = (ctx, { width, height }) => {\n  if (width < height) {\n    // portrait! rotate.\n    const temp = width\n    width = height\n    height = temp\n    ctx.setTransform(0, 1, 1, 0, 0, 0)\n  }\n\n  const centers = [\n    {\n      x: 0,\n      y: height / 4\n    },\n    {\n      x: width,\n      y: (3 * height) / 4\n    }\n  ]\n\n  const speed = 0.3\n  const separation = 30\n  const length = -width / 7\n  const lines = [\n    {\n      x: (2 * width) / 9,\n      offset: 0,\n      increment: speed,\n      separation,\n      length\n    },\n    {\n      x: (7 * width) / 9,\n      offset: 0,\n      increment: -2 * speed,\n      separation,\n      length\n    }\n  ]\n  let hue = randomInt(360)\n\n  let frame: number\n\n  ctx.lineWidth = 3\n  ctx.lineCap = 'round'\n\n  const drawFrame = () => {\n    frame = requestAnimationFrame(drawFrame)\n    ctx.clearRect(0, 0, width, height)\n    ctx.strokeStyle = `hsla(${hue++}, 100%, 40%, 0.6)`\n\n    ctx.beginPath()\n    lines.forEach(({ x, offset, separation, length }) => {\n      centers.forEach(center => {\n        for (\n          let y = offset - separation;\n          y < height + separation;\n          y += separation\n        ) {\n          project(ctx, { x, y }, center, length)\n        }\n      })\n    })\n    ctx.closePath()\n    ctx.stroke()\n    lines.forEach(line => {\n      line.offset = (line.offset + line.increment) % line.separation\n    })\n  }\n\n  drawFrame()\n\n  return () => cancelAnimationFrame(frame)\n}\n\nconst Perspectives: React.FC = () => {\n  return <CanvasWallpaper className=\"Perspectives\" draw={draw} />\n}\n\nexport default Perspectives\n"],"sourceRoot":""}