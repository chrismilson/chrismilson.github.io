{"version":3,"sources":["ui/components/Wallpaper/common/random.ts","../node_modules/react-hooks-use-canvas-size/lib/index.es.js","../node_modules/react-hooks-use-drawing-canvas/lib/index.es.js","ui/components/Wallpaper/common/Wallpaper.tsx","ui/components/Wallpaper/common/PVector.ts","ui/components/Wallpaper/Circles/Circle.ts","ui/components/Wallpaper/Circles/index.tsx"],"names":["randomInt","from","to","Math","floor","random","randomRange","useCanvasSize","canvasRef","useState","width","height","size","setSize","useEffect","current","getSize","offsetWidth","offsetHeight","window","addEventListener","removeEventListener","useDrawingCanvas","draw","ref","useRef","context","setContext","getContext","useLayoutEffect","canvas","prefersReducedMotion","matchMedia","matches","CanvasWallpaper","props","className","pixelated","classNames","undefined","push","join","PVector","x","y","this","action","extraVectors","componentWise","vectors","add","subtract","multiply","divisors","divide","a","b","c","d","e","f","transform","theta","rotate","sf","scale","modulus","map","v","components","reduce","s","sum","p","dividend","divisor","vector","cos","sin","sqrt","Circle","position","hue","age","maxAge","ctx","path","Path2D","arc","PI","save","strokeStyle","stroke","restore","resetIfNeeded","frame","circles","i","drawFrame","requestAnimationFrame","clearRect","forEach","cancelAnimationFrame","Circles"],"mappings":"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","file":"static/js/4.65968b0e.chunk.js","sourcesContent":["/**\n * Returns a random integer between two numbers, or if there is only one number,\n * between zero and that number.\n *\n * @param from The lower bound\n * @param to The upper bound\n */\nexport const randomInt = (from: number, to: number = from) => {\n  if (from === to) from = 0\n  return from + Math.floor(Math.random() * (to - from))\n}\n\n/**\n * Returns a random float in a given range.\n */\nexport const randomRange = (from: number, to: number) => {\n  return from + Math.random() * (to - from)\n}\n\n/** Returns a random normally distributed float */\nexport const randomNormal = (mean = 0, stddev = 1) => {\n  let u = 0\n  let v = 0\n  while (u === 0) u = Math.random()\n  while (v === 0) v = Math.random()\n  const statistic = Math.sqrt(-2 * Math.log(u)) + Math.cos(2 * Math.PI * v)\n  return statistic * stddev + mean\n}\n","import { useState, useEffect } from 'react';\n\n/**\r\n * Provides the width and height of a referenced canvas in the dom.\r\n *\r\n * ***Note:*** this method assumes the width and height of the canvas will not\r\n * change unless the window width has changed.\r\n *\r\n * @param canvasRef A reference to the canvas element.\r\n */\r\nfunction useCanvasSize(canvasRef) {\r\n    const [size, setSize] = useState({ width: 0, height: 0 });\r\n    useEffect(() => {\r\n        if (!canvasRef.current)\r\n            return;\r\n        const getSize = () => {\r\n            const width = canvasRef.current.offsetWidth;\r\n            const height = canvasRef.current.offsetHeight;\r\n            setSize({ width, height });\r\n        };\r\n        getSize();\r\n        window.addEventListener('resize', getSize);\r\n        return () => window.removeEventListener('resize', getSize);\r\n    }, [canvasRef]);\r\n    return size;\r\n}\n\nexport default useCanvasSize;\n","import { useRef, useState, useEffect, useLayoutEffect } from 'react';\nimport useCanvasSize from 'react-hooks-use-canvas-size';\n\n/**\r\n * Provides an api for getting a 2d context from a canvas element.\r\n *\r\n * The returned reference should be assigned to a canvas element. The drawing\r\n * method will then be called with a context on the referenced canvas.\r\n *\r\n * Be careful about defining the drawing method. If it is defined inline, then\r\n * it will be re-called on every render.\r\n *\r\n * ```ts\r\n * // defines a new drawing function on every render\r\n * const Component = () => {\r\n *   const canvasRef = useDrawingCanvas(ctx => ctx.fillRect(0, 0, 10, 10))\r\n *\r\n *   return <canvas ref={canvasRef} />\r\n * }\r\n *\r\n * // safer\r\n * const draw = ctx => ctx.fillRect(0, 0, 10, 10)\r\n *\r\n * const Component = () => {\r\n *   const canvasRef = useDrawingCanvas(draw)\r\n *\r\n *   return <canvas ref={canvasRef} />\r\n * }\r\n * ```\r\n *\r\n * @param draw The drawing method\r\n */\r\nfunction useDrawingCanvas(draw) {\r\n    const ref = useRef();\r\n    const [context, setContext] = useState();\r\n    const { width, height } = useCanvasSize(ref);\r\n    useEffect(() => {\r\n        if (!ref.current)\r\n            return;\r\n        setContext(ref.current.getContext('2d'));\r\n    }, [ref]);\r\n    useLayoutEffect(() => {\r\n        if (context) {\r\n            context.canvas.width = width;\r\n            context.canvas.height = height;\r\n            return draw(context, {\r\n                width,\r\n                height,\r\n                prefersReducedMotion: !window.matchMedia('(prefers-reduced-motion: no-preferece)').matches\r\n            });\r\n        }\r\n    }, [draw, context, width, height]);\r\n    return ref;\r\n}\n\nexport default useDrawingCanvas;\n","import React from 'react'\nimport useDrawingCanvas, { DrawingMethod } from 'react-hooks-use-drawing-canvas'\nimport './Wallpaper.css'\n\nexport type CanvasDrawingMethod = DrawingMethod\n\nexport const CanvasWallpaper: React.FC<{\n  /** extra classes for css */\n  className: string\n  draw: CanvasDrawingMethod\n  /** Render the canvas pixelated; without interpolation. Default: false */\n  pixelated?: boolean\n}> = props => {\n  const { draw, className, pixelated = false } = props\n  const canvasRef = useDrawingCanvas(draw)\n  const classNames = ['Wallpaper', 'Canvas']\n\n  if (className !== undefined) {\n    classNames.push(className)\n  }\n  if (pixelated) {\n    classNames.push('pixelated')\n  }\n\n  return <canvas className={classNames.join(' ')} ref={canvasRef} />\n}\n","/**\n * A class that represents a position vector in two dimensional space.\n * @property x The x position\n * @property y The y position\n */\nexport default class PVector {\n  /** The x-position of the vector */\n  readonly x: number\n  /** The y-position of the vector */\n  readonly y: number\n\n  /**\n   * Makes a new PVector.\n   *\n   * @param x The x position\n   * @param y The y position (defaults to be the same as the x position)\n   */\n  constructor(x: number, y: number = x) {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Applies a given action to a list of vectors component-wise.\n   *\n   * For example, to add two vectors, `a` and `b`, componentwise, we could do\n   * ```ts\n   * PVector.componentWise((aComp, bComp) => aComp + bComp, a, b)\n   * ```\n   *\n   * @param action The action to be preformed on each component\n   * @param vectors The vectors whose components will be passed to the action\n   */\n  static componentWise(\n    action: (...components: number[]) => number,\n    ...vectors: PVector[]\n  ) {\n    return new PVector(\n      action(...vectors.map(v => v.x)),\n      action(...vectors.map(v => v.y))\n    )\n  }\n  /**\n   * The same as the static method, but the first vector will be the current\n   * `this`.\n   *\n   * @param action The action to perform on each component\n   * @param extraVectors Any extra vectors to be included in the calculation\n   */\n  componentWise(\n    action: (...components: number[]) => number,\n    ...extraVectors: PVector[]\n  ) {\n    return PVector.componentWise(action, this, ...extraVectors)\n  }\n\n  /**\n   * Adds a list of vectors together component-wise.\n   *\n   * @param vectors The vectors to add\n   */\n  static add(...vectors: PVector[]) {\n    return PVector.componentWise(\n      (...components) => components.reduce((s, v) => s + v, 0),\n      ...vectors\n    )\n  }\n  /**\n   * Adds a list of vectors to the vector component-wise.\n   *\n   * @param vectors The vectors to add\n   */\n  add(...vectors: PVector[]) {\n    return PVector.add(this, ...vectors)\n  }\n\n  /**\n   * Subtracts a list of vectors from a given vector.\n   *\n   * @param from The vector that will be subtracted from\n   * @param vectors The vectors to subtract\n   */\n  static subtract(from: PVector, ...vectors: PVector[]) {\n    return PVector.componentWise(\n      (from, sum) => from - sum,\n      from,\n      PVector.add(...vectors)\n    )\n  }\n  /**\n   * Subtracts a list of vectors from the vector.\n   *\n   * @param vectors The vectors to subtract\n   */\n  subtract(...vectors: PVector[]) {\n    return PVector.subtract(this, ...vectors)\n  }\n\n  /**\n   * Returns the component-wise multiplication of the vectors.\n   *\n   * @param vectors The vectors to multiply\n   */\n  static multiply(...vectors: PVector[]) {\n    return PVector.componentWise(\n      (...components) => components.reduce((p, v) => p * v, 1),\n      ...vectors\n    )\n  }\n  /**\n   * Multiplies the vector by a list of vectors.\n   *\n   * @param vectors The vectors to multiply by\n   */\n  multiply(...vectors: PVector[]) {\n    return PVector.multiply(this, ...vectors)\n  }\n\n  /**\n   * Divides a given vector by a list of other vectors component-wise.\n   *\n   * @param dividend The vector to be divided\n   * @param divisors The vectors to divide by\n   */\n  static divide(dividend: PVector, ...divisors: PVector[]) {\n    return PVector.componentWise(\n      (dividend, divisor) => dividend / divisor,\n      dividend,\n      PVector.multiply(...divisors)\n    )\n  }\n  /**\n   * Divides the vector by a list of other vectors component-wise.\n   *\n   * @param divisors The vectors to divide by\n   */\n  divide(...divisors: PVector[]) {\n    return PVector.divide(this, ...divisors)\n  }\n\n  /** Multiplies a vector by a matrix [a b, c d], and translates by e, f. */\n  static transform(\n    vector: PVector,\n    a: number,\n    b: number,\n    c: number,\n    d: number,\n    e = 0,\n    f = 0\n  ) {\n    return new PVector(\n      vector.x * a + vector.y * c + e,\n      vector.x * b + vector.y * d + f\n    )\n  }\n  /** Multiplies the vector by a matrix [a b, c d], and translates by e, f. */\n  transform(a: number, b: number, c: number, d: number, e = 0, f = 0) {\n    return PVector.transform(this, a, b, c, d, e, f)\n  }\n\n  /** Rotates a vector by an angle. (anticlockwise in radians) */\n  static rotate(vector: PVector, theta: number) {\n    const cos = Math.cos(theta)\n    const sin = Math.sin(theta)\n    return vector.transform(cos, -sin, sin, cos, 0, 0)\n  }\n  /** Rotates the vector by an angle. (anticlockwise in radians) */\n  rotate(theta: number) {\n    return PVector.rotate(this, theta)\n  }\n\n  /** Scales a vector by a factor. */\n  static scale(vector: PVector, sf: number) {\n    return PVector.componentWise(x => sf * x, vector)\n  }\n  /** Scales the vector by a factor. */\n  scale(sf: number) {\n    return PVector.scale(this, sf)\n  }\n\n  /** Gets the modulus of a vector */\n  static modulus(vector: PVector) {\n    return Math.sqrt(vector.x * vector.x + vector.y * vector.y)\n  }\n  /** Gets the modulus of a vector */\n  modulus() {\n    return PVector.modulus(this)\n  }\n\n  /**\n   * PVectors will be compared by their lengths.\n   */\n  valueOf() {\n    return this.modulus()\n  }\n}\n","import PVector from '../common/PVector'\nimport { randomInt, randomRange } from '../common/random'\n\n/** A class representing a circle on the screen. */\nexport default class Circle {\n  static maxAge = 200\n  private position = new PVector(Math.random(), Math.random())\n  private hue = randomInt(360)\n  /**\n   * The age of the circle. A negative number represents an\n   * unborn circle\n   */\n  private age = -randomInt(2 * Circle.maxAge)\n  private size = randomRange(0.5, 1.5)\n\n  private resetIfNeeded() {\n    if (this.age > Circle.maxAge) {\n      this.position = new PVector(Math.random(), Math.random())\n      this.hue = randomInt(360)\n      this.age = -randomInt(Circle.maxAge)\n      this.size = randomRange(0.5, 1.5)\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    if (this.age >= 0) {\n      const path = new Path2D()\n      path.arc(\n        ctx.canvas.width * this.position.x,\n        ctx.canvas.height * this.position.y,\n        this.age * this.size,\n        0,\n        2 * Math.PI\n      )\n\n      ctx.save()\n      ctx.strokeStyle = `hsla(${this.hue}, 100%, 40%, ${1 -\n        this.age / Circle.maxAge})`\n      ctx.stroke(path)\n      ctx.restore()\n\n      this.resetIfNeeded()\n    }\n    this.age++\n  }\n}\n","import React from 'react'\nimport { CanvasWallpaper, CanvasDrawingMethod } from '../common/Wallpaper'\nimport Circle from './Circle'\n\nconst draw: CanvasDrawingMethod = (ctx, { width, height }) => {\n  const circles: Circle[] = []\n  for (let i = 0; i < (width * height) / 100000; i++) {\n    circles.push(new Circle())\n  }\n\n  let frame: number\n\n  const drawFrame = () => {\n    frame = requestAnimationFrame(drawFrame)\n    ctx.clearRect(0, 0, width, height)\n    circles.forEach(c => c.draw(ctx))\n  }\n\n  drawFrame()\n  return () => cancelAnimationFrame(frame)\n}\n\n/**\n * A wallpaper component that draws nice circles to the screen.\n */\nconst Circles: React.FC = () => {\n  return <CanvasWallpaper className=\"Circles\" draw={draw} />\n}\n\nexport default Circles\n"],"sourceRoot":""}