{"version":3,"sources":["ui/components/Social.tsx","ui/components/Wallpaper/common/Wallpaper.tsx","ui/components/Wallpaper/common/PVector.ts","ui/components/Wallpaper/common/random.ts","ui/components/Wallpaper/Circles.tsx","ui/components/Wallpaper/Perspectives.tsx","ui/components/Wallpaper/BouncyBalls.tsx","ui/components/Wallpaper/GameOfLife.tsx","ui/components/Wallpaper/Dragon.tsx","ui/components/Wallpaper/YinYang.tsx","ui/components/Wallpaper/StarMap.tsx","ui/components/Wallpaper/index.ts","index.tsx","ui/App.tsx"],"names":["IconLink","props","link","title","Icon","className","isNotLocal","test","rel","undefined","target","href","Github","FaGithub","Linkedin","FaLinkedin","Resume","FaIdBadge","Social","CanvasWallpaper","draw","canvasRef","useDrawingCanvas","ref","PVector","x","y","this","action","extraVectors","componentWise","vectors","add","subtract","multiply","divisors","divide","a","b","c","d","e","f","transform","theta","rotate","sf","scale","modulus","map","v","components","reduce","s","from","sum","p","dividend","divisor","vector","cos","Math","sin","sqrt","randomInt","to","floor","random","randomRange","Circle","position","hue","age","maxAge","size","ctx","path","Path2D","arc","canvas","width","height","PI","save","strokeStyle","stroke","restore","resetIfNeeded","frame","circles","i","push","drawFrame","requestAnimationFrame","clearRect","forEach","cancelAnimationFrame","Circles","project","length","translate","moveTo","atan2","lineTo","temp","setTransform","centers","lines","offset","increment","separation","lineWidth","lineCap","beginPath","center","closePath","line","Perspectives","Ball","min","max","radius","fillStyle","fill","hit","abs","numBalls","balls","ball","move","BouncyBalls","Cell","initiallyAlive","status","neighbors","neighbor","n","isAlive","Game","board","j","dx","dy","addNeighbor","fillRect","row","cell","check","swap","widthPX","heightPX","globalAlpha","game","interval","setInterval","clearInterval","GameOfLife","Slider","value","change","onChange","isTop","isBottom","Scale","start","end","next","o","mid","t","Dragon","x1","y1","x2","y2","head","depth","current","split","join","diff","deeper","shallower","trace","portrait","dragon","reverse","DragonCurve","angle","primaryStyle","secondaryStyle","layer","half","YinYang","WebPoint","origin","phasorLength","phasor","phasorSpeed","pos","samples","r","startNode","K","points","unprocessed","cellSize","SQRT1_2","grid","Array","ceil","generateAround","parent","success","attempt","candidate","isGoodCandidate","di","dj","pop","poissantDiscSampler","point","sample","spin","joinNeighbors","paint","allWallpapers","storage","window","localStorage","idx","parseInt","getItem","setItem","ReactDOM","render","useState","word","setWord","useEffect","timeout","setTimeout","clearTimeout","words","speed","document","getElementById"],"mappings":"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","file":"static/js/main.8ef227d3.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  FaGithub,\n  FaLinkedin,\n  FaIdBadge,\n  FaTwitter,\n  FaDev\n} from 'react-icons/fa'\nimport { IconType } from 'react-icons/lib/cjs'\nimport './Social.css'\n\nconst IconLink: React.FC<{\n  link: string\n  title: string\n  Icon: IconType\n  className?: string\n}> = props => {\n  const { link, title, Icon, className } = props\n  // if the link starts with 'http://' or 'https://', its not local.\n  const isNotLocal = /^https?:\\/\\//.test(link)\n\n  return (\n    <a\n      {...{\n        className: `Icon ${className}`,\n        rel: isNotLocal ? 'noopener noreferrer' : undefined,\n        target: '_blank',\n        href: link,\n        title\n      }}\n    >\n      <Icon />\n    </a>\n  )\n}\n\nexport const Github = () => (\n  <IconLink\n    title=\"Check out my Github\"\n    link=\"https://github.com/chrismilson\"\n    Icon={FaGithub}\n  />\n)\n\nexport const Linkedin = () => (\n  <IconLink\n    title=\"Have a look at my Linkedin\"\n    link=\"https://linkedin.com/in/chris-milson\"\n    Icon={FaLinkedin}\n  />\n)\n\nexport const Resume = () => (\n  <IconLink\n    title=\"Take a peek at my resume...\"\n    link=\"CV.pdf\"\n    Icon={FaIdBadge}\n  />\n)\n\nexport const Twitter = () => (\n  <IconLink\n    title=\"...Tweet tweet\"\n    link=\"https://twitter.com/_shlappas\"\n    Icon={FaTwitter}\n  />\n)\n\nexport const Dev = () => (\n  <IconLink\n    title=\"I have no posts here!!\"\n    link=\"https://dev.to/chrismilson\"\n    Icon={FaDev}\n  />\n)\n\nconst Social: React.FC = () => (\n  <div className=\"Social\">\n    <Github />\n    <Linkedin />\n    <Resume />\n  </div>\n)\n\nexport default Social\n","import React from 'react'\nimport useDrawingCanvas from 'react-hooks-use-drawing-canvas'\nimport './Wallpaper.css'\n\nexport type CanvasDrawingMethod = (\n  /** A drawing context on the canvas object. */\n  context: CanvasRenderingContext2D,\n  /** The width of the drawing context. */\n  width: number,\n  /** The height of the drawing context. */\n  height: number\n) => void | (() => void)\n\nexport const CanvasWallpaper: React.FC<{\n  /** extra classes for css */\n  className: string\n  draw: CanvasDrawingMethod\n}> = props => {\n  const { draw, className } = props\n  const canvasRef = useDrawingCanvas(draw)\n  return <canvas className={`Wallpaper Canvas ${className}`} ref={canvasRef} />\n}\n","/**\n * A class that represents a position vector in two dimensional space.\n * @property x The x position\n * @property y The y position\n */\nexport default class PVector {\n  /** The x-position of the vector */\n  readonly x: number\n  /** The y-position of the vector */\n  readonly y: number\n\n  /**\n   * Makes a new PVector.\n   *\n   * @param x The x position\n   * @param y The y position (defaults to be the same as the x position)\n   */\n  constructor(x: number, y: number = x) {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Applies a given action to a list of vectors component-wise.\n   *\n   * For example, to add two vectors, `a` and `b`, componentwise, we could do\n   * ```ts\n   * PVector.componentWise((aComp, bComp) => aComp + bComp, a, b)\n   * ```\n   *\n   * @param action The action to be preformed on each component\n   * @param vectors The vectors whose components will be passed to the action\n   */\n  static componentWise(\n    action: (...components: number[]) => number,\n    ...vectors: PVector[]\n  ) {\n    return new PVector(\n      action(...vectors.map(v => v.x)),\n      action(...vectors.map(v => v.y))\n    )\n  }\n  /**\n   * The same as the static method, but the first vector will be the current\n   * `this`.\n   *\n   * @param action The action to perform on each component\n   * @param extraVectors Any extra vectors to be included in the calculation\n   */\n  componentWise(\n    action: (...components: number[]) => number,\n    ...extraVectors: PVector[]\n  ) {\n    return PVector.componentWise(action, this, ...extraVectors)\n  }\n\n  /**\n   * Adds a list of vectors together component-wise.\n   *\n   * @param vectors The vectors to add\n   */\n  static add(...vectors: PVector[]) {\n    return PVector.componentWise(\n      (...components) => components.reduce((s, v) => s + v, 0),\n      ...vectors\n    )\n  }\n  /**\n   * Adds a list of vectors to the vector component-wise.\n   *\n   * @param vectors The vectors to add\n   */\n  add(...vectors: PVector[]) {\n    return PVector.add(this, ...vectors)\n  }\n\n  /**\n   * Subtracts a list of vectors from a given vector.\n   *\n   * @param from The vector that will be subtracted from\n   * @param vectors The vectors to subtract\n   */\n  static subtract(from: PVector, ...vectors: PVector[]) {\n    return PVector.componentWise(\n      (from, sum) => from - sum,\n      from,\n      PVector.add(...vectors)\n    )\n  }\n  /**\n   * Subtracts a list of vectors from the vector.\n   *\n   * @param vectors The vectors to subtract\n   */\n  subtract(...vectors: PVector[]) {\n    return PVector.subtract(this, ...vectors)\n  }\n\n  /**\n   * Returns the component-wise multiplication of the vectors.\n   *\n   * @param vectors The vectors to multiply\n   */\n  static multiply(...vectors: PVector[]) {\n    return PVector.componentWise(\n      (...components) => components.reduce((p, v) => p * v, 1),\n      ...vectors\n    )\n  }\n  /**\n   * Multiplies the vector by a list of vectors.\n   *\n   * @param vectors The vectors to multiply by\n   */\n  multiply(...vectors: PVector[]) {\n    return PVector.multiply(this, ...vectors)\n  }\n\n  /**\n   * Divides a given vector by a list of other vectors component-wise.\n   *\n   * @param dividend The vector to be divided\n   * @param divisors The vectors to divide by\n   */\n  static divide(dividend: PVector, ...divisors: PVector[]) {\n    return PVector.componentWise(\n      (dividend, divisor) => dividend / divisor,\n      dividend,\n      PVector.multiply(...divisors)\n    )\n  }\n  /**\n   * Divides the vector by a list of other vectors component-wise.\n   *\n   * @param divisors The vectors to divide by\n   */\n  divide(...divisors: PVector[]) {\n    return PVector.divide(this, ...divisors)\n  }\n\n  /** Multiplies a vector by a matrix [a b, c d], and translates by e, f. */\n  static transform(\n    vector: PVector,\n    a: number,\n    b: number,\n    c: number,\n    d: number,\n    e = 0,\n    f = 0\n  ) {\n    return new PVector(\n      vector.x * a + vector.y * c + e,\n      vector.x * b + vector.y * d + f\n    )\n  }\n  /** Multiplies the vector by a matrix [a b, c d], and translates by e, f. */\n  transform(a: number, b: number, c: number, d: number, e = 0, f = 0) {\n    return PVector.transform(this, a, b, c, d, e, f)\n  }\n\n  /** Rotates a vector by an angle. (anticlockwise in radians) */\n  static rotate(vector: PVector, theta: number) {\n    const cos = Math.cos(theta)\n    const sin = Math.sin(theta)\n    return vector.transform(cos, -sin, sin, cos, 0, 0)\n  }\n  /** Rotates the vector by an angle. (anticlockwise in radians) */\n  rotate(theta: number) {\n    return PVector.rotate(this, theta)\n  }\n\n  /** Scales a vector by a factor. */\n  static scale(vector: PVector, sf: number) {\n    return PVector.componentWise(x => sf * x, vector)\n  }\n  /** Scales the vector by a factor. */\n  scale(sf: number) {\n    return PVector.scale(this, sf)\n  }\n\n  /** Gets the modulus of a vector */\n  static modulus(vector: PVector) {\n    return Math.sqrt(vector.x * vector.x + vector.y * vector.y)\n  }\n  /** Gets the modulus of a vector */\n  modulus() {\n    return PVector.modulus(this)\n  }\n}\n","/**\n * Returns a random integer between two numbers, or if there is only one number,\n * between zero and that number.\n *\n * @param from The lower bound\n * @param to The upper bound\n */\nexport const randomInt = (from: number, to: number = from) => {\n  if (from === to) from = 0\n  return from + Math.floor(Math.random() * (to - from))\n}\n\n/**\n * Returns a random float in a given range.\n */\nexport const randomRange = (from: number, to: number) => {\n  return from + Math.random() * (to - from)\n}\n\n/** Returns a random normally distributed float */\nexport const randomNormal = (mean = 0, stddev = 1) => {\n  let u = 0\n  let v = 0\n  while (u === 0) u = Math.random()\n  while (v === 0) v = Math.random()\n  const statistic = Math.sqrt(-2 * Math.log(u)) + Math.cos(2 * Math.PI * v)\n  return statistic * stddev + mean\n}\n","import React from 'react'\nimport { CanvasWallpaper, CanvasDrawingMethod } from './common/Wallpaper'\nimport PVector from './common/PVector'\nimport { randomInt, randomRange } from './common/random'\n\n/** A class representing a circle on the screen. */\nclass Circle {\n  static maxAge = 200\n  private position = new PVector(Math.random(), Math.random())\n  private hue = randomInt(360)\n  /**\n   * The age of the circle. A negative number represents an\n   * unborn circle\n   */\n  private age = -randomInt(2 * Circle.maxAge)\n  private size = randomRange(0.5, 1.5)\n\n  private resetIfNeeded() {\n    if (this.age > Circle.maxAge) {\n      this.position = new PVector(Math.random(), Math.random())\n      this.hue = randomInt(360)\n      this.age = -randomInt(Circle.maxAge)\n      this.size = randomRange(0.5, 1.5)\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    if (this.age >= 0) {\n      const path = new Path2D()\n      path.arc(\n        ctx.canvas.width * this.position.x,\n        ctx.canvas.height * this.position.y,\n        this.age * this.size,\n        0,\n        2 * Math.PI\n      )\n\n      ctx.save()\n      ctx.strokeStyle = `hsla(${this.hue}, 100%, 40%, ${1 -\n        this.age / Circle.maxAge})`\n      ctx.stroke(path)\n      ctx.restore()\n\n      this.resetIfNeeded()\n    }\n    this.age++\n  }\n}\n\nconst draw: CanvasDrawingMethod = (ctx, width, height) => {\n  const circles: Circle[] = []\n  for (let i = 0; i < (width * height) / 100000; i++) {\n    circles.push(new Circle())\n  }\n\n  let frame: number\n\n  const drawFrame = () => {\n    frame = requestAnimationFrame(drawFrame)\n    ctx.clearRect(0, 0, width, height)\n    circles.forEach(c => c.draw(ctx))\n  }\n\n  drawFrame()\n  return () => cancelAnimationFrame(frame)\n}\n\n/**\n * A wallpaper component that draws nice circles to the screen.\n */\nconst Circles: React.FC = () => {\n  return <CanvasWallpaper className=\"Circles\" draw={draw} />\n}\n\nexport default Circles\n","import React from 'react'\nimport { CanvasWallpaper, CanvasDrawingMethod } from './common/Wallpaper'\nimport { randomInt } from './common/random'\n\n/** Project a line of a set length from a point */\nconst project = (\n  ctx: CanvasRenderingContext2D,\n  from: { x: number; y: number },\n  to: { x: number; y: number },\n  length: number\n) => {\n  ctx.save()\n  ctx.translate(from.x, from.y)\n  ctx.moveTo(0, 0)\n  ctx.rotate(-Math.atan2(to.x - from.x, to.y - from.y))\n  ctx.lineTo(0, length)\n  ctx.restore()\n}\n\nconst draw: CanvasDrawingMethod = (ctx, width, height) => {\n  if (width < height) {\n    // portrait! rotate.\n    const temp = width\n    width = height\n    height = temp\n    ctx.setTransform(0, 1, 1, 0, 0, 0)\n  }\n\n  const centers = [\n    {\n      x: 0,\n      y: height / 4\n    },\n    {\n      x: width,\n      y: (3 * height) / 4\n    }\n  ]\n\n  const speed = 0.3\n  const separation = 30\n  const length = -width / 7\n  const lines = [\n    {\n      x: (2 * width) / 9,\n      offset: 0,\n      increment: speed,\n      separation,\n      length\n    },\n    {\n      x: (7 * width) / 9,\n      offset: 0,\n      increment: -2 * speed,\n      separation,\n      length\n    }\n  ]\n  let hue = randomInt(360)\n\n  let frame: number\n\n  ctx.lineWidth = 3\n  ctx.lineCap = 'round'\n\n  const drawFrame = () => {\n    frame = requestAnimationFrame(drawFrame)\n    ctx.clearRect(0, 0, width, height)\n    ctx.strokeStyle = `hsla(${hue++}, 100%, 40%, 0.6)`\n\n    ctx.beginPath()\n    lines.forEach(({ x, offset, separation, length }) => {\n      centers.forEach(center => {\n        for (\n          let y = offset - separation;\n          y < height + separation;\n          y += separation\n        ) {\n          project(ctx, { x, y }, center, length)\n        }\n      })\n    })\n    ctx.closePath()\n    ctx.stroke()\n    lines.forEach(line => {\n      line.offset = (line.offset + line.increment) % line.separation\n    })\n  }\n\n  drawFrame()\n\n  return () => cancelAnimationFrame(frame)\n}\n\nconst Perspectives: React.FC = () => {\n  return <CanvasWallpaper className=\"Perspectives\" draw={draw} />\n}\n\nexport default Perspectives\n","import React from 'react'\nimport { CanvasWallpaper, CanvasDrawingMethod } from './common/Wallpaper'\nimport PVector from './common/PVector'\nimport { randomInt, randomRange } from './common/random'\n\nclass Ball {\n  /** The displacement of the ball */\n  private s: PVector\n  /** The velocity of the ball */\n  private v: PVector\n  /** The bottom left corner of the ball's bounding box */\n  private min: PVector\n  /** The top right corner of the ball's bounding box */\n  private max: PVector\n  /** The radius of the ball */\n  private radius: number\n  /** The hue of the ball */\n  private hue: number\n\n  constructor(\n    min: PVector,\n    max: PVector,\n    radius = Math.min(max.x - min.x, max.y - min.y, 20 + Math.random() * 20)\n  ) {\n    this.s = new PVector(\n      randomRange(min.x + radius, max.x - radius),\n      randomRange(min.y + radius, max.y - radius)\n    )\n    this.v = new PVector(1 + Math.random() * 3, 1 + Math.random() * 3).multiply(\n      new PVector(randomInt(2) || -1, randomInt(2) || -1)\n    )\n    this.radius = radius\n    this.min = min\n    this.max = max.add(min.multiply(new PVector(-1)))\n    this.hue = randomInt(360)\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.save()\n\n    ctx.beginPath()\n    ctx.arc(\n      this.min.x + this.s.x,\n      this.min.y + this.s.y,\n      this.radius,\n      0,\n      2 * Math.PI\n    )\n    ctx.closePath()\n\n    ctx.fillStyle = `hsla(${this.hue}, 100%, 40%, 0.6)`\n    ctx.fill()\n\n    ctx.restore()\n  }\n\n  move() {\n    const hit = PVector.componentWise(\n      (s, v, max) =>\n        Math.abs(Math.floor((s + v - this.radius) / (max - 2 * this.radius))),\n      this.s,\n      this.v,\n      this.max\n    )\n    if (hit.x | hit.y) this.hue = randomInt(360)\n\n    this.s = this.s\n      // apply velocity\n      .add(this.v)\n\n    this.v = this.v\n      // bounce off walls\n      .multiply(new PVector(1).subtract(hit.multiply(new PVector(2))))\n      // lose momentum on any wall hit\n      // .multiply(new PVector(1 - 0.1 * (hit.x + hit.y)))\n      // add gravity\n      .add(new PVector(0, 0.1 * (1 - hit.y)))\n  }\n}\n\nconst draw: CanvasDrawingMethod = (ctx, width, height) => {\n  const numBalls = (width * height) / 50000\n  const balls: Ball[] = []\n  for (let i = 0; i < numBalls; i++) {\n    balls.push(new Ball(new PVector(0, 0), new PVector(width, height)))\n  }\n  let frame: number\n\n  const drawFrame = () => {\n    frame = requestAnimationFrame(drawFrame)\n    ctx.clearRect(0, 0, width, height)\n\n    balls.forEach(ball => {\n      ball.draw(ctx)\n      ball.move()\n    })\n  }\n\n  drawFrame()\n  return () => {\n    cancelAnimationFrame(frame)\n  }\n}\n\nconst BouncyBalls: React.FC = () => (\n  <CanvasWallpaper className=\"BouncyBalls\" draw={draw} />\n)\n\nexport default BouncyBalls\n","import React from 'react'\nimport { CanvasWallpaper, CanvasDrawingMethod } from './common/Wallpaper'\nimport { randomInt } from './common/random'\n\nclass Cell {\n  private status: number\n  private neighbors: Cell[] = []\n\n  constructor(initiallyAlive: boolean) {\n    this.status = initiallyAlive ? 1 : 0\n  }\n\n  get isAlive() {\n    return this.status & 1\n  }\n\n  swap() {\n    this.status ^= 1\n  }\n\n  addNeighbor(neighbor: Cell) {\n    this.neighbors.push(neighbor)\n  }\n\n  check() {\n    const liveNeighbors = this.neighbors.reduce((s, n) => s + n.isAlive, 0)\n\n    if ((liveNeighbors | this.status) === 3) this.status |= 2\n  }\n\n  age() {\n    this.status = this.status >> 1\n  }\n}\n\nclass Game {\n  private width: number\n  private height: number\n  /**\n   * A cell is a number representing different states.\n   * The bits from least significan to most significant mean:\n   * - The cells current status.\n   * - The cells next status.\n   */\n  private board: Cell[][]\n\n  constructor(width: number, height: number) {\n    this.width = Math.floor(width)\n    this.height = Math.floor(height)\n    this.board = []\n\n    const probabilityOfLife = 0.1\n    for (let i = 0; i < this.width; i++) {\n      this.board[i] = []\n      for (let j = 0; j < this.height; j++) {\n        this.board[i][j] = new Cell(Math.random() < probabilityOfLife)\n      }\n    }\n\n    // addd the cell's neighbors\n    for (let i = 0; i < this.width; i++) {\n      for (let j = 0; j < this.height; j++) {\n        for (const [dx, dy] of [\n          [-1, -1],\n          [-1, 0],\n          [-1, 1],\n          [0, -1],\n          [0, 1],\n          [1, -1],\n          [1, 0],\n          [1, 1]\n        ]) {\n          const x = (i + dx + this.width) % this.width\n          const y = (j + dy + this.height) % this.height\n          this.board[i][j].addNeighbor(this.board[x][y])\n        }\n      }\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    for (let i = 0; i < this.width; i++) {\n      for (let j = 0; j < this.height; j++) {\n        if (this.board[i][j].isAlive) {\n          ctx.save()\n          ctx.fillStyle = `hsl(${randomInt(360)},100%,40%)`\n          ctx.fillRect(i, j, 1, 1)\n          ctx.restore()\n        }\n      }\n    }\n  }\n\n  move() {\n    this.board.forEach(row => row.forEach(cell => cell.check()))\n    this.board.forEach(row => row.forEach(cell => cell.age()))\n\n    const randomSwaps = 5\n    for (let i = 0; i < randomSwaps; i++) {\n      this.board[randomInt(this.width)][randomInt(this.height)].swap()\n    }\n  }\n}\n\nconst draw: CanvasDrawingMethod = (ctx, widthPX, heightPX) => {\n  // transform the canvas\n  const ratio = 4\n  const width = widthPX / ratio\n  const height = heightPX / ratio\n  ctx.setTransform(ratio, 0, 0, ratio, 0, 0)\n  ctx.globalAlpha = 0.2\n\n  const game = new Game(width, height)\n\n  const draw = () => {\n    ctx.clearRect(0, 0, width, height)\n\n    game.draw(ctx)\n    game.move()\n  }\n\n  const interval = setInterval(draw, 100)\n  return () => {\n    clearInterval(interval)\n  }\n}\n\nconst GameOfLife: React.FC = () => (\n  <CanvasWallpaper className=\"GameOfLife\" draw={draw} />\n)\n\nexport default GameOfLife\n","import React from 'react'\nimport { CanvasWallpaper, CanvasDrawingMethod } from './common/Wallpaper'\nimport PVector from './common/PVector'\nimport { randomInt } from './common/random'\n\nclass Slider {\n  value: number\n  change: number\n  min: number\n  max: number\n  onChange?: (isTop: boolean) => void\n\n  constructor(\n    value: number,\n    change: number,\n    min: number,\n    max: number,\n    onChange?: (isTop: boolean) => void\n  ) {\n    this.value = value\n    this.change = change\n    this.min = min\n    this.max = max\n    this.onChange = onChange\n  }\n\n  next() {\n    const isTop = this.value + this.change > this.max\n    const isBottom = this.value + this.change < this.min\n    if (isTop || isBottom) {\n      if (this.onChange) this.onChange(isTop)\n      this.change *= -1\n    }\n    this.value += this.change\n  }\n}\n\nclass Scale {\n  start: PVector\n  end: PVector\n\n  next?: Scale\n\n  constructor(start: PVector, end: PVector) {\n    this.start = start\n    this.end = end\n  }\n\n  private mid(o: number) {\n    // cubic bezier\n    const t = (3 * (1 - o) + o) * o * o\n    const theta = (t * Math.PI) / 4\n\n    const cos = Math.cos(theta)\n    const sin = Math.sin(theta)\n    const sf = 1 / (2 * cos)\n\n    return this.start.add(\n      this.end\n        .subtract(this.start)\n        .transform(cos, -sin, sin, cos)\n        .scale(sf)\n    )\n  }\n\n  split() {\n    const temp = this.next\n    this.next = new Scale(this.end, this.mid(1))\n    this.end = this.mid(1)\n    this.next.next = temp\n  }\n\n  join() {\n    if (this.next) {\n      this.end = this.next.start\n      this.next = this.next.next\n    }\n  }\n\n  trace(ctx: CanvasRenderingContext2D, t = 0) {\n    const { start, end } = this\n    const mid = this.mid(t)\n    ctx.moveTo(start.x, start.y)\n    ctx.lineTo(mid.x, mid.y)\n    ctx.lineTo(end.x, end.y)\n  }\n}\n\nclass Dragon {\n  head: Scale\n  depth = 0\n\n  constructor(x1: number, y1: number, x2: number, y2: number) {\n    this.head = new Scale(new PVector(x1, y1), new PVector(x2, y2))\n  }\n\n  deeper() {\n    this.depth += 1\n    let current: Scale | undefined = this.head\n    while (current) {\n      current.split()\n      current = current.next?.next\n    }\n  }\n\n  shallower() {\n    this.depth -= 1\n    let current: Scale | undefined = this.head\n    while (current) {\n      current.join()\n      current = current.next\n    }\n  }\n\n  trace(ctx: CanvasRenderingContext2D, depth: number) {\n    let diff = Math.floor(depth - this.depth)\n    while (diff-- > 0) this.deeper()\n    while (diff++ < 0) this.shallower()\n\n    const offset = depth - Math.floor(depth)\n\n    let current: Scale | undefined = this.head\n    while (current) {\n      current.trace(ctx, offset)\n      current = current.next\n    }\n  }\n}\n\nconst draw: CanvasDrawingMethod = (ctx, width, height) => {\n  let portrait = false\n  if (width < height) {\n    const temp = width\n    width = height\n    height = temp\n    ctx.setTransform(0, 1, 1, 0, 0, 0)\n    portrait = true\n  }\n\n  const dragon = new Dragon(0, 0, 0, height / 2)\n  let reverse = false\n\n  const depth = new Slider(2, 0.01, 2, 9, isTop => {\n    if (isTop) return\n    reverse = !reverse\n  })\n\n  let hue = randomInt(0, 360)\n  const translate = width / 5\n  ctx.globalAlpha = 0.5\n\n  let frame: number\n  const drawFrame = () => {\n    frame = requestAnimationFrame(drawFrame)\n    ctx.clearRect(0, 0, width, height)\n    ctx.beginPath()\n\n    ctx.save()\n    if (reverse) ctx.transform(0.8, 0, 0, -0.8, width / 10, (7 * height) / 10)\n    else ctx.transform(0.8, 0, 0, 0.8, width / 10, (3 * height) / 10)\n\n    ctx.save()\n    ctx.translate(translate, 0)\n    ctx.scale(-1, 1)\n    dragon.trace(ctx, depth.value)\n    ctx.save()\n    ctx.translate(0, height / 2)\n    ctx.scale(-1, -1)\n    dragon.trace(ctx, depth.value)\n    ctx.restore()\n    ctx.restore()\n\n    ctx.save()\n    ctx.translate(width - translate, 0)\n    if (portrait) ctx.scale(-1, 1)\n    dragon.trace(ctx, depth.value)\n    ctx.save()\n    ctx.translate(0, height / 2)\n    ctx.scale(-1, -1)\n    dragon.trace(ctx, depth.value)\n    ctx.restore()\n    ctx.restore()\n\n    ctx.restore()\n    ctx.strokeStyle = `hsl(${hue},100%,40%)`\n    hue = (hue + 1) % 360\n    ctx.stroke()\n\n    depth.next()\n  }\n\n  drawFrame()\n  return () => cancelAnimationFrame(frame)\n}\n\nconst DragonCurve: React.FC = () => {\n  return <CanvasWallpaper className=\"Dragon\" draw={draw} />\n}\n\nexport default DragonCurve\n","import React from 'react'\nimport { CanvasWallpaper, CanvasDrawingMethod } from './common/Wallpaper'\nimport { randomInt } from './common/random'\n\n// by changing these factors that pattern will evolve differently\nconst leftFactor = 1\nconst rightFactor = 1\n\nconst layer = (\n  ctx: CanvasRenderingContext2D,\n  radius: number,\n  angle: number,\n  primaryStyle: string | CanvasGradient | CanvasPattern,\n  secondaryStyle: string | CanvasGradient | CanvasPattern\n) => {\n  // draw semicircles and go deeper\n  ctx.save()\n  ctx.rotate(angle)\n\n  // primary colour\n  ctx.beginPath()\n  ctx.arc(0, 0, radius, 0, Math.PI)\n  ctx.closePath()\n  ctx.fillStyle = primaryStyle\n  ctx.fill()\n\n  // secondary color\n  ctx.beginPath()\n  ctx.arc(0, 0, radius, 0, Math.PI, true)\n  ctx.closePath()\n  ctx.fillStyle = secondaryStyle\n  ctx.fill()\n\n  if (radius < 30) {\n    const half = radius / 2\n    // bigger circles\n    ctx.beginPath()\n    ctx.arc(-half, 0, half, 0, 2 * Math.PI)\n    ctx.closePath()\n\n    ctx.fillStyle = primaryStyle\n    ctx.fill()\n\n    ctx.beginPath()\n    ctx.arc(half, 0, half, 0, 2 * Math.PI)\n    ctx.closePath()\n\n    ctx.fillStyle = secondaryStyle\n    ctx.fill()\n\n    // small circles\n    ctx.beginPath()\n    ctx.arc(-half, 0, half / 2, 0, 2 * Math.PI)\n    ctx.closePath()\n\n    ctx.fillStyle = secondaryStyle\n    ctx.fill()\n\n    ctx.beginPath()\n    ctx.arc(half, 0, half / 2, 0, 2 * Math.PI)\n    ctx.closePath()\n\n    ctx.fillStyle = primaryStyle\n    ctx.fill()\n  } else {\n    ctx.translate(-radius / 2, 0)\n    layer(ctx, radius / 2, leftFactor * angle, primaryStyle, secondaryStyle)\n\n    ctx.translate(radius, 0)\n    layer(ctx, radius / 2, rightFactor * angle, primaryStyle, secondaryStyle)\n  }\n\n  ctx.restore()\n}\n\nconst draw: CanvasDrawingMethod = (ctx, width, height) => {\n  const radius = Math.max(20, Math.min(width / 2, height / 2) - 20)\n\n  ctx.translate(width / 2, height / 2)\n\n  let hue = randomInt(0, 360)\n  let angle = 0\n\n  let frame: number\n  const drawFrame = () => {\n    frame = requestAnimationFrame(drawFrame)\n    ctx.clearRect(-width / 2, -height / 2, width, height)\n    const primaryStyle = `hsl(${hue},100%,40%)`\n    const secondaryStyle = `hsl(${hue + 180}, 100%,40%)`\n    layer(ctx, radius, angle, primaryStyle, secondaryStyle)\n    ctx.save()\n    ctx.fillStyle = 'rgba(255,255,255,0.5)'\n    ctx.fillRect(-width / 2, -height / 2, width, height)\n    ctx.restore()\n    hue = (hue + 0.2) % 360\n    angle = angle + 0.005\n  }\n\n  drawFrame()\n\n  return () => cancelAnimationFrame(frame)\n}\n\nconst YinYang: React.FC = () => {\n  return <CanvasWallpaper className=\"Perspectives\" draw={draw} />\n}\n\nexport default YinYang\n","import React from 'react'\nimport PVector from './common/PVector'\nimport { randomInt, randomRange } from './common/random'\nimport { CanvasWallpaper, CanvasDrawingMethod } from './common/Wallpaper'\n\n/**\n * This method will produce a sampling of points in 2d space such that the\n * distance between any two points is at least r.\n *\n * @param width The width of the sample area.\n * @param height The height of the sample area.\n * @param r The minimum distance between samples.\n * @param K How many candidate points to try before deciding the point is\n * surrounded.\n */\nconst poissantDiscSampler = (\n  width: number,\n  height: number,\n  r: number,\n  startNode = new PVector(randomRange(0, width), randomRange(0, height)),\n  K = 10\n): [PVector, number[]][] => {\n  const points: PVector[] = [startNode]\n  // Indices of the entries in points that are not processed yet\n  const unprocessed: number[] = [0]\n  // If we divide the space up into squares of this size, no two points can be\n  // in the same square.\n  const cellSize = r * Math.SQRT1_2\n  /**\n   * A 2d array that contains the indices of the sampled points.\n   * We will use it to check for other points within a certain area.\n   */\n  const grid: number[][] = [...Array(Math.ceil(width / cellSize))].map(() =>\n    Array(Math.ceil(height / cellSize)).fill(-1)\n  )\n  // We should add the starting node to the grid\n  grid[Math.floor(startNode.x / cellSize)][\n    Math.floor(startNode.y / cellSize)\n  ] = 0\n\n  /**\n   * Produces a new PVector that is in the goldilocks zone around v.\n   *\n   * @param v The center of the annulus to sample from.\n   */\n  const generateAround = (v: PVector) => {\n    const radius = randomRange(r, r * 2)\n    const angle = randomRange(0, Math.PI * 2)\n\n    return v.add(new PVector(0, 1).rotate(angle).scale(radius))\n  }\n\n  while (unprocessed.length > 0) {\n    const p = randomInt(unprocessed.length)\n    const parent = points[unprocessed[p]]\n\n    // we now want to attempt to add a new point near parent.\n    let success = false\n    for (let attempt = 0; !success && attempt < K; attempt++) {\n      const candidate = generateAround(parent)\n      if (\n        candidate.x < 0 ||\n        candidate.x > width ||\n        candidate.y < 0 ||\n        candidate.y > height\n      ) {\n        continue\n      }\n\n      // We now need to check the 9 grid cells around the cell that other would\n      // go into to check if there are any other nodes already here.\n      const i = Math.floor(candidate.x / cellSize)\n      const j = Math.floor(candidate.y / cellSize)\n      // innocent until provn guilty\n      let isGoodCandidate = true\n      for (let di = -2; isGoodCandidate && di <= 2; di++) {\n        for (let dj = -2; isGoodCandidate && dj <= 2; dj++) {\n          if (\n            i + di < 0 ||\n            i + di >= grid.length ||\n            j + dj < 0 ||\n            j + dj >= grid[0].length\n          ) {\n            continue\n          }\n          const neighbor = grid[i + di][j + dj]\n          if (\n            // If there is another node relatively close; and,\n            neighbor >= 0 &&\n            // the distance is less than our minimum distance,\n            candidate.subtract(points[neighbor]).modulus() < r\n          ) {\n            // this candidate is not a good one.\n            isGoodCandidate = false\n          }\n        }\n      }\n      if (isGoodCandidate) {\n        // the candidate will be the next value in points, so its index will be\n        // the current length of points.\n        success = true\n        grid[i][j] = points.length\n        unprocessed.push(points.length)\n        points.push(candidate)\n      }\n    }\n    if (!success) {\n      // we want to swap the last unprocessed element with our parent element\n      unprocessed[p] = unprocessed[unprocessed.length - 1]\n      // and then remove the last element (which is now definitely our parent)\n      unprocessed.pop()\n    }\n  }\n\n  // return points\n  // now we have finished generating the points, now we want to return the\n  // points with a list of their possible neighbors\n  return points.map(p => {\n    const neighbors = []\n    const i = Math.floor(p.x / cellSize)\n    const j = Math.floor(p.y / cellSize)\n\n    for (let di = -2; di <= 2; di++) {\n      for (let dj = -2; dj <= 2; dj++) {\n        if (\n          di + dj < 0 ||\n          (di === 0 && dj === 0) ||\n          i + di < 0 ||\n          i + di >= grid.length ||\n          j + dj < 0 ||\n          j + dj >= grid[0].length\n        ) {\n          continue\n        }\n        const neighbor = grid[i + di][j + dj]\n        if (neighbor >= 0 && p.subtract(points[neighbor]).modulus() < r * 2) {\n          neighbors.push(neighbor)\n        }\n      }\n    }\n    return [p, neighbors]\n  })\n}\n\nclass WebPoint {\n  origin: PVector\n  phasor: PVector\n  phasorSpeed: number\n  pos: PVector\n  neighbors: WebPoint[]\n  hue: number\n\n  constructor(origin: PVector, phasorLength: number) {\n    this.neighbors = []\n    this.origin = origin\n    this.phasor = new PVector(0, phasorLength).rotate(\n      randomRange(0, 2 * Math.PI)\n    )\n    this.phasorSpeed = randomRange(-0.02, 0.02)\n\n    this.pos = this.origin.add(this.phasor)\n\n    this.hue = randomInt(360)\n  }\n\n  joinNeighbors(ctx: CanvasRenderingContext2D) {\n    ctx.save()\n    ctx.strokeStyle = `hsl(${this.hue},60%,80%)`\n\n    for (const neighbor of this.neighbors) {\n      ctx.beginPath()\n      ctx.moveTo(this.pos.x, this.pos.y)\n      ctx.lineTo(neighbor.pos.x, neighbor.pos.y)\n      ctx.closePath()\n      ctx.stroke()\n    }\n    ctx.restore()\n  }\n\n  paint(ctx: CanvasRenderingContext2D) {\n    ctx.save()\n    ctx.fillStyle = `hsl(${this.hue},100%,80%)`\n\n    ctx.beginPath()\n    ctx.arc(this.pos.x, this.pos.y, 3, 0, 2 * Math.PI)\n    ctx.closePath()\n    ctx.fill()\n\n    ctx.restore()\n  }\n\n  spin() {\n    this.phasor = this.phasor.rotate(this.phasorSpeed)\n    this.pos = this.origin.add(this.phasor)\n  }\n\n  addNeighbor(neighbor: WebPoint) {\n    this.neighbors.push(neighbor)\n  }\n}\n\nconst draw: CanvasDrawingMethod = (ctx, width, height) => {\n  const samples = poissantDiscSampler(\n    width,\n    height,\n    50,\n    new PVector(width / 2, height / 2)\n  )\n  const points = samples.map(([point]) => new WebPoint(point, 15))\n\n  samples.forEach((sample, i) => {\n    for (const j of sample[1]) {\n      points[i].addNeighbor(points[j])\n    }\n  })\n\n  let frame: number\n\n  const drawFrame = () => {\n    frame = requestAnimationFrame(drawFrame)\n    ctx.clearRect(0, 0, width, height)\n    points.forEach(p => {\n      p.spin()\n      p.joinNeighbors(ctx)\n    })\n    // we dont want the joining lines to cover the points\n    points.forEach(p => {\n      p.paint(ctx)\n    })\n  }\n\n  drawFrame()\n\n  return () => cancelAnimationFrame(frame)\n}\n\nconst StarMap: React.FC = () => {\n  return <CanvasWallpaper className=\"StarMap\" draw={draw} />\n}\n\nexport default StarMap\n","import Circles from './Circles'\nimport Perspectives from './Perspectives'\nimport BouncyBalls from './BouncyBalls'\nimport GameOfLife from './GameOfLife'\nimport Dragon from './Dragon'\nimport YinYang from './YinYang'\nimport StarMap from './StarMap'\n\nconst allWallpapers = [\n  Circles,\n  Perspectives,\n  BouncyBalls,\n  GameOfLife,\n  Dragon,\n  YinYang,\n  StarMap\n]\n\n// Get the next wallpaper in the list and remember which one we just used\nconst storage = window.localStorage\nconst idx = parseInt(storage.getItem('wallpaper') || '0', 10)\nstorage.setItem('wallpaper', `${(idx + 1) % allWallpapers.length}`)\n\nexport default allWallpapers[idx]\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './ui/App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","import React, { useEffect, useState } from 'react'\nimport Social from './components/Social'\nimport Wallpaper from './components/Wallpaper'\nimport NotTypist from 'react-not-typist'\nimport './App.css'\n\nexport default function App() {\n  const [word, setWord] = useState('My name is')\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setWord('Chris Milson')\n    }, 2000)\n    return () => clearTimeout(timeout)\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Social />\n      <h1>\n        <NotTypist words={[word]} speed={1000} />\n      </h1>\n      <Wallpaper />\n    </div>\n  )\n}\n"],"sourceRoot":""}