{"version":3,"sources":["ui/components/Wallpaper/common/random.ts","../node_modules/react-hooks-use-canvas-size/lib/index.es.js","../node_modules/react-hooks-use-drawing-canvas/lib/index.es.js","ui/components/Wallpaper/common/Wallpaper.tsx","ui/components/Wallpaper/common/PVector.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","ui/components/Wallpaper/common/poissantDiscSampler.ts","ui/components/Wallpaper/StarMap/WebPoint.ts","ui/components/Wallpaper/StarMap/index.tsx"],"names":["randomInt","from","to","Math","floor","random","randomRange","useCanvasSize","canvasRef","useState","width","height","size","setSize","useEffect","current","getSize","offsetWidth","offsetHeight","window","addEventListener","removeEventListener","useDrawingCanvas","draw","ref","useRef","context","setContext","getContext","useLayoutEffect","canvas","prefersReducedMotion","matchMedia","matches","CanvasWallpaper","props","className","pixelated","classNames","undefined","push","join","PVector","x","y","this","action","extraVectors","componentWise","vectors","add","subtract","multiply","divisors","divide","a","b","c","d","e","f","transform","theta","rotate","sf","scale","modulus","map","v","components","reduce","s","sum","p","dividend","divisor","vector","cos","sin","sqrt","_createForOfIteratorHelper","o","Symbol","iterator","Array","isArray","unsupportedIterableToArray","i","F","n","length","done","value","_e","TypeError","it","err","normalCompletion","didErr","step","next","_e2","poissantDiscSampler","r","startNode","K","points","unprocessed","cellSize","SQRT1_2","grid","ceil","fill","generateAround","radius","angle","PI","parent","success","attempt","candidate","j","isGoodCandidate","di","dj","neighbor","pop","neighbors","WebPoint","origin","phasorLength","phasor","phasorSpeed","pos","hue","ctx","save","strength","min","max","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","restore","fillStyle","arc","frame","samples","point","forEach","sample","addNeighbor","drawFrame","requestAnimationFrame","clearRect","spin","joinNeighbors","paint","cancelAnimationFrame","StarMap"],"mappings":"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","file":"static/js/6.7b51bacd.chunk.js","sourcesContent":["/**\n * Returns a random integer between two numbers, or if there is only one number,\n * between zero and that number.\n *\n * @param from The lower bound\n * @param to The upper bound\n */\nexport const randomInt = (from: number, to: number = from) => {\n  if (from === to) from = 0\n  return from + Math.floor(Math.random() * (to - from))\n}\n\n/**\n * Returns a random float in a given range.\n */\nexport const randomRange = (from: number, to: number) => {\n  return from + Math.random() * (to - from)\n}\n\n/** Returns a random normally distributed float */\nexport const randomNormal = (mean = 0, stddev = 1) => {\n  let u = 0\n  let v = 0\n  while (u === 0) u = Math.random()\n  while (v === 0) v = Math.random()\n  const statistic = Math.sqrt(-2 * Math.log(u)) + Math.cos(2 * Math.PI * v)\n  return statistic * stddev + mean\n}\n","import { useState, useEffect } from 'react';\n\n/**\r\n * Provides the width and height of a referenced canvas in the dom.\r\n *\r\n * ***Note:*** this method assumes the width and height of the canvas will not\r\n * change unless the window width has changed.\r\n *\r\n * @param canvasRef A reference to the canvas element.\r\n */\r\nfunction useCanvasSize(canvasRef) {\r\n    const [size, setSize] = useState({ width: 0, height: 0 });\r\n    useEffect(() => {\r\n        if (!canvasRef.current)\r\n            return;\r\n        const getSize = () => {\r\n            const width = canvasRef.current.offsetWidth;\r\n            const height = canvasRef.current.offsetHeight;\r\n            setSize({ width, height });\r\n        };\r\n        getSize();\r\n        window.addEventListener('resize', getSize);\r\n        return () => window.removeEventListener('resize', getSize);\r\n    }, [canvasRef]);\r\n    return size;\r\n}\n\nexport default useCanvasSize;\n","import { useRef, useState, useEffect, useLayoutEffect } from 'react';\nimport useCanvasSize from 'react-hooks-use-canvas-size';\n\n/**\r\n * Provides an api for getting a 2d context from a canvas element.\r\n *\r\n * The returned reference should be assigned to a canvas element. The drawing\r\n * method will then be called with a context on the referenced canvas.\r\n *\r\n * Be careful about defining the drawing method. If it is defined inline, then\r\n * it will be re-called on every render.\r\n *\r\n * ```ts\r\n * // defines a new drawing function on every render\r\n * const Component = () => {\r\n *   const canvasRef = useDrawingCanvas(ctx => ctx.fillRect(0, 0, 10, 10))\r\n *\r\n *   return <canvas ref={canvasRef} />\r\n * }\r\n *\r\n * // safer\r\n * const draw = ctx => ctx.fillRect(0, 0, 10, 10)\r\n *\r\n * const Component = () => {\r\n *   const canvasRef = useDrawingCanvas(draw)\r\n *\r\n *   return <canvas ref={canvasRef} />\r\n * }\r\n * ```\r\n *\r\n * @param draw The drawing method\r\n */\r\nfunction useDrawingCanvas(draw) {\r\n    const ref = useRef();\r\n    const [context, setContext] = useState();\r\n    const { width, height } = useCanvasSize(ref);\r\n    useEffect(() => {\r\n        if (!ref.current)\r\n            return;\r\n        setContext(ref.current.getContext('2d'));\r\n    }, [ref]);\r\n    useLayoutEffect(() => {\r\n        if (context) {\r\n            context.canvas.width = width;\r\n            context.canvas.height = height;\r\n            return draw(context, {\r\n                width,\r\n                height,\r\n                prefersReducedMotion: !window.matchMedia('(prefers-reduced-motion: no-preferece)').matches\r\n            });\r\n        }\r\n    }, [draw, context, width, height]);\r\n    return ref;\r\n}\n\nexport default useDrawingCanvas;\n","import React from 'react'\nimport useDrawingCanvas, { DrawingMethod } from 'react-hooks-use-drawing-canvas'\nimport './Wallpaper.css'\n\nexport type CanvasDrawingMethod = DrawingMethod\n\nexport const CanvasWallpaper: React.FC<{\n  /** extra classes for css */\n  className: string\n  draw: CanvasDrawingMethod\n  /** Render the canvas pixelated; without interpolation. Default: false */\n  pixelated?: boolean\n}> = props => {\n  const { draw, className, pixelated = false } = props\n  const canvasRef = useDrawingCanvas(draw)\n  const classNames = ['Wallpaper', 'Canvas']\n\n  if (className !== undefined) {\n    classNames.push(className)\n  }\n  if (pixelated) {\n    classNames.push('pixelated')\n  }\n\n  return <canvas className={classNames.join(' ')} ref={canvasRef} />\n}\n","/**\n * A class that represents a position vector in two dimensional space.\n * @property x The x position\n * @property y The y position\n */\nexport default class PVector {\n  /** The x-position of the vector */\n  readonly x: number\n  /** The y-position of the vector */\n  readonly y: number\n\n  /**\n   * Makes a new PVector.\n   *\n   * @param x The x position\n   * @param y The y position (defaults to be the same as the x position)\n   */\n  constructor(x: number, y: number = x) {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Applies a given action to a list of vectors component-wise.\n   *\n   * For example, to add two vectors, `a` and `b`, componentwise, we could do\n   * ```ts\n   * PVector.componentWise((aComp, bComp) => aComp + bComp, a, b)\n   * ```\n   *\n   * @param action The action to be preformed on each component\n   * @param vectors The vectors whose components will be passed to the action\n   */\n  static componentWise(\n    action: (...components: number[]) => number,\n    ...vectors: PVector[]\n  ) {\n    return new PVector(\n      action(...vectors.map(v => v.x)),\n      action(...vectors.map(v => v.y))\n    )\n  }\n  /**\n   * The same as the static method, but the first vector will be the current\n   * `this`.\n   *\n   * @param action The action to perform on each component\n   * @param extraVectors Any extra vectors to be included in the calculation\n   */\n  componentWise(\n    action: (...components: number[]) => number,\n    ...extraVectors: PVector[]\n  ) {\n    return PVector.componentWise(action, this, ...extraVectors)\n  }\n\n  /**\n   * Adds a list of vectors together component-wise.\n   *\n   * @param vectors The vectors to add\n   */\n  static add(...vectors: PVector[]) {\n    return PVector.componentWise(\n      (...components) => components.reduce((s, v) => s + v, 0),\n      ...vectors\n    )\n  }\n  /**\n   * Adds a list of vectors to the vector component-wise.\n   *\n   * @param vectors The vectors to add\n   */\n  add(...vectors: PVector[]) {\n    return PVector.add(this, ...vectors)\n  }\n\n  /**\n   * Subtracts a list of vectors from a given vector.\n   *\n   * @param from The vector that will be subtracted from\n   * @param vectors The vectors to subtract\n   */\n  static subtract(from: PVector, ...vectors: PVector[]) {\n    return PVector.componentWise(\n      (from, sum) => from - sum,\n      from,\n      PVector.add(...vectors)\n    )\n  }\n  /**\n   * Subtracts a list of vectors from the vector.\n   *\n   * @param vectors The vectors to subtract\n   */\n  subtract(...vectors: PVector[]) {\n    return PVector.subtract(this, ...vectors)\n  }\n\n  /**\n   * Returns the component-wise multiplication of the vectors.\n   *\n   * @param vectors The vectors to multiply\n   */\n  static multiply(...vectors: PVector[]) {\n    return PVector.componentWise(\n      (...components) => components.reduce((p, v) => p * v, 1),\n      ...vectors\n    )\n  }\n  /**\n   * Multiplies the vector by a list of vectors.\n   *\n   * @param vectors The vectors to multiply by\n   */\n  multiply(...vectors: PVector[]) {\n    return PVector.multiply(this, ...vectors)\n  }\n\n  /**\n   * Divides a given vector by a list of other vectors component-wise.\n   *\n   * @param dividend The vector to be divided\n   * @param divisors The vectors to divide by\n   */\n  static divide(dividend: PVector, ...divisors: PVector[]) {\n    return PVector.componentWise(\n      (dividend, divisor) => dividend / divisor,\n      dividend,\n      PVector.multiply(...divisors)\n    )\n  }\n  /**\n   * Divides the vector by a list of other vectors component-wise.\n   *\n   * @param divisors The vectors to divide by\n   */\n  divide(...divisors: PVector[]) {\n    return PVector.divide(this, ...divisors)\n  }\n\n  /** Multiplies a vector by a matrix [a b, c d], and translates by e, f. */\n  static transform(\n    vector: PVector,\n    a: number,\n    b: number,\n    c: number,\n    d: number,\n    e = 0,\n    f = 0\n  ) {\n    return new PVector(\n      vector.x * a + vector.y * c + e,\n      vector.x * b + vector.y * d + f\n    )\n  }\n  /** Multiplies the vector by a matrix [a b, c d], and translates by e, f. */\n  transform(a: number, b: number, c: number, d: number, e = 0, f = 0) {\n    return PVector.transform(this, a, b, c, d, e, f)\n  }\n\n  /** Rotates a vector by an angle. (anticlockwise in radians) */\n  static rotate(vector: PVector, theta: number) {\n    const cos = Math.cos(theta)\n    const sin = Math.sin(theta)\n    return vector.transform(cos, -sin, sin, cos, 0, 0)\n  }\n  /** Rotates the vector by an angle. (anticlockwise in radians) */\n  rotate(theta: number) {\n    return PVector.rotate(this, theta)\n  }\n\n  /** Scales a vector by a factor. */\n  static scale(vector: PVector, sf: number) {\n    return PVector.componentWise(x => sf * x, vector)\n  }\n  /** Scales the vector by a factor. */\n  scale(sf: number) {\n    return PVector.scale(this, sf)\n  }\n\n  /** Gets the modulus of a vector */\n  static modulus(vector: PVector) {\n    return Math.sqrt(vector.x * vector.x + vector.y * vector.y)\n  }\n  /** Gets the modulus of a vector */\n  modulus() {\n    return PVector.modulus(this)\n  }\n\n  /**\n   * PVectors will be compared by their lengths.\n   */\n  valueOf() {\n    return this.modulus()\n  }\n}\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import PVector from '../common/PVector'\nimport { randomInt, randomRange } from '../common/random'\n\n/**\n * This method will produce a sampling of points in 2d space such that the\n * distance between any two points is at least r.\n *\n * @param width The width of the sample area.\n * @param height The height of the sample area.\n * @param r The minimum distance between samples.\n * @param K How many candidate points to try before deciding the point is\n * surrounded.\n */\nconst poissantDiscSampler = (\n  width: number,\n  height: number,\n  r: number,\n  startNode = new PVector(randomRange(0, width), randomRange(0, height)),\n  K = 10\n): [PVector, number[]][] => {\n  const points: PVector[] = [startNode]\n  // Indices of the entries in points that are not processed yet\n  const unprocessed: number[] = [0]\n  // If we divide the space up into squares of this size, no two points can be\n  // in the same square.\n  const cellSize = r * Math.SQRT1_2\n  /**\n   * A 2d array that contains the indices of the sampled points.\n   * We will use it to check for other points within a certain area.\n   */\n  const grid: number[][] = [...Array(Math.ceil(width / cellSize))].map(() =>\n    Array(Math.ceil(height / cellSize)).fill(-1)\n  )\n  // We should add the starting node to the grid\n  grid[Math.floor(startNode.x / cellSize)][\n    Math.floor(startNode.y / cellSize)\n  ] = 0\n\n  /**\n   * Produces a new PVector that is in the goldilocks zone around v.\n   *\n   * @param v The center of the annulus to sample from.\n   */\n  const generateAround = (v: PVector) => {\n    const radius = randomRange(r, r * 2)\n    const angle = randomRange(0, Math.PI * 2)\n\n    return v.add(new PVector(0, 1).rotate(angle).scale(radius))\n  }\n\n  while (unprocessed.length > 0) {\n    const p = randomInt(unprocessed.length)\n    const parent = points[unprocessed[p]]\n\n    // we now want to attempt to add a new point near parent.\n    let success = false\n    for (let attempt = 0; !success && attempt < K; attempt++) {\n      const candidate = generateAround(parent)\n      if (\n        candidate.x < 0 ||\n        candidate.x > width ||\n        candidate.y < 0 ||\n        candidate.y > height\n      ) {\n        continue\n      }\n\n      // We now need to check the 9 grid cells around the cell that other would\n      // go into to check if there are any other nodes already here.\n      const i = Math.floor(candidate.x / cellSize)\n      const j = Math.floor(candidate.y / cellSize)\n      // innocent until provn guilty\n      let isGoodCandidate = true\n      for (let di = -2; isGoodCandidate && di <= 2; di++) {\n        for (let dj = -2; isGoodCandidate && dj <= 2; dj++) {\n          if (\n            i + di < 0 ||\n            i + di >= grid.length ||\n            j + dj < 0 ||\n            j + dj >= grid[0].length\n          ) {\n            continue\n          }\n          const neighbor = grid[i + di][j + dj]\n          if (\n            // If there is another node relatively close; and,\n            neighbor >= 0 &&\n            // the distance is less than our minimum distance,\n            candidate.subtract(points[neighbor]).modulus() < r\n          ) {\n            // this candidate is not a good one.\n            isGoodCandidate = false\n          }\n        }\n      }\n      if (isGoodCandidate) {\n        // the candidate will be the next value in points, so its index will be\n        // the current length of points.\n        success = true\n        grid[i][j] = points.length\n        unprocessed.push(points.length)\n        points.push(candidate)\n      }\n    }\n    if (!success) {\n      // we want to swap the last unprocessed element with our parent element\n      unprocessed[p] = unprocessed[unprocessed.length - 1]\n      // and then remove the last element (which is now definitely our parent)\n      unprocessed.pop()\n    }\n  }\n\n  // return points\n  // now we have finished generating the points, now we want to return the\n  // points with a list of their possible neighbors\n  return points.map(p => {\n    const neighbors: number[] = []\n    const i = Math.floor(p.x / cellSize)\n    const j = Math.floor(p.y / cellSize)\n\n    for (let di = -2; di <= 2; di++) {\n      for (let dj = -2; dj <= 2; dj++) {\n        if (\n          di + dj < 0 ||\n          (di === 0 && dj === 0) ||\n          i + di < 0 ||\n          i + di >= grid.length ||\n          j + dj < 0 ||\n          j + dj >= grid[0].length\n        ) {\n          continue\n        }\n        const neighbor = grid[i + di][j + dj]\n        if (neighbor >= 0 && p.subtract(points[neighbor]).modulus() < r * 2) {\n          neighbors.push(neighbor)\n        }\n      }\n    }\n    return [p, neighbors]\n  })\n}\n\nexport default poissantDiscSampler\n","import PVector from '../common/PVector'\nimport { randomInt, randomRange } from '../common/random'\n\nexport default class WebPoint {\n  origin: PVector\n  phasor: PVector\n  phasorSpeed: number\n  pos: PVector\n  neighbors: WebPoint[]\n  hue: number\n\n  constructor(origin: PVector, phasorLength: number) {\n    this.neighbors = []\n    this.origin = origin\n    this.phasor = new PVector(0, phasorLength).rotate(\n      randomRange(0, 2 * Math.PI)\n    )\n    this.phasorSpeed = randomRange(-0.02, 0.02)\n\n    this.pos = this.origin.add(this.phasor)\n\n    this.hue = randomInt(360)\n  }\n\n  joinNeighbors(ctx: CanvasRenderingContext2D) {\n    ctx.save()\n\n    for (const neighbor of this.neighbors) {\n      const strength = Math.min(\n        1,\n        Math.max(\n          0,\n          1 -\n            this.pos.subtract(neighbor.pos).modulus() /\n              (4 * this.phasor.modulus())\n        )\n      )\n      ctx.strokeStyle = `hsla(${this.hue},60%,80%,${strength})`\n      ctx.beginPath()\n      ctx.moveTo(this.pos.x, this.pos.y)\n      ctx.lineTo(neighbor.pos.x, neighbor.pos.y)\n      ctx.closePath()\n      ctx.stroke()\n    }\n    ctx.restore()\n  }\n\n  paint(ctx: CanvasRenderingContext2D) {\n    ctx.save()\n    ctx.fillStyle = `hsl(${this.hue},70%,80%)`\n\n    ctx.beginPath()\n    ctx.arc(this.pos.x, this.pos.y, 3, 0, 2 * Math.PI)\n    ctx.closePath()\n    ctx.fill()\n\n    ctx.restore()\n  }\n\n  spin() {\n    this.phasor = this.phasor.rotate(this.phasorSpeed)\n    this.pos = this.origin.add(this.phasor)\n  }\n\n  addNeighbor(neighbor: WebPoint) {\n    this.neighbors.push(neighbor)\n  }\n}\n","import React from 'react'\nimport PVector from '../common/PVector'\nimport { CanvasWallpaper, CanvasDrawingMethod } from '../common/Wallpaper'\nimport poissantDiscSampler from '../common/poissantDiscSampler'\nimport WebPoint from './WebPoint'\n\nconst draw: CanvasDrawingMethod = (ctx, { width, height }) => {\n  const samples = poissantDiscSampler(\n    width,\n    height,\n    50,\n    new PVector(width / 2, height / 2)\n  )\n  const points = samples.map(([point]) => new WebPoint(point, 15))\n\n  samples.forEach((sample, i) => {\n    for (const j of sample[1]) {\n      points[i].addNeighbor(points[j])\n    }\n  })\n\n  let frame: number\n\n  const drawFrame = () => {\n    frame = requestAnimationFrame(drawFrame)\n    ctx.clearRect(0, 0, width, height)\n    points.forEach(p => {\n      p.spin()\n      p.joinNeighbors(ctx)\n    })\n    // we dont want the joining lines to cover the points\n    points.forEach(p => {\n      p.paint(ctx)\n    })\n  }\n\n  drawFrame()\n\n  return () => cancelAnimationFrame(frame)\n}\n\nconst StarMap: React.FC = () => {\n  return <CanvasWallpaper className=\"StarMap\" draw={draw} />\n}\n\nexport default StarMap\n"],"sourceRoot":""}