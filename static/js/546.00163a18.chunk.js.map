{"version":3,"file":"static/js/546.00163a18.chunk.js","mappings":"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","sources":["ui/components/Wallpaper/common/random.ts","ui/components/Wallpaper/common/react-hooks-use-drawing-canvas/index.ts","ui/components/Wallpaper/common/Wallpaper.tsx","ui/components/Wallpaper/common/poissantDiscSampler.ts","ui/components/Wallpaper/StarMap/WebPoint.ts","ui/components/Wallpaper/StarMap/index.tsx","ui/components/Wallpaper/common/PVector.ts"],"sourcesContent":["/**\n * Returns a random integer between two numbers, or if there is only one number,\n * between zero and that number.\n *\n * @param from The lower bound\n * @param to The upper bound\n */\nexport const randomInt = (from: number, to: number = from) => {\n  if (from === to) from = 0\n  return from + Math.floor(Math.random() * (to - from))\n}\n\n/**\n * Returns a random float in a given range.\n */\nexport const randomRange = (from: number, to: number) => {\n  return from + Math.random() * (to - from)\n}\n\n/** Returns a random normally distributed float */\nexport const randomNormal = (mean = 0, stddev = 1) => {\n  let u = 0\n  let v = 0\n  while (u === 0) u = Math.random()\n  while (v === 0) v = Math.random()\n  const statistic = Math.sqrt(-2 * Math.log(u)) + Math.cos(2 * Math.PI * v)\n  return statistic * stddev + mean\n}\n","import {\n  MutableRefObject,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState\n} from 'react'\n\nexport type DrawingMethod = (\n  /** A 2d context on the referenced canvas */\n  context: CanvasRenderingContext2D,\n  /** Some properties about the canvas that may or may not be critical to the\n   * way the method is used.\n   */\n  props: {\n    /** The width of the context */\n    width: number\n    /** The height of the context */\n    height: number\n    /**\n     * A flag that tells the drawing method about the user's motion preferences.\n     * Perhaps a drawing method that has excessive movement would include a case\n     * for users that prefer reduced motion. Defaults to reduced motion.\n     */\n    prefersReducedMotion: boolean\n  }\n) => void | (() => void)\n\n/**\n * Provides the width and height of a referenced canvas in the dom.\n *\n * ***Note:*** this method assumes the width and height of the canvas will not\n * change unless the window width has changed.\n *\n * @param canvasRef A reference to the canvas element.\n */\nfunction useCanvasSize(\n  canvasRef: MutableRefObject<HTMLCanvasElement | undefined>\n) {\n  const [size, setSize] = useState({ width: 0, height: 0 })\n\n  useEffect(() => {\n    const getSize = () => {\n      if (!canvasRef.current) return\n      const dpr = window.devicePixelRatio\n      const width = canvasRef.current.offsetWidth * dpr\n      const height = canvasRef.current.offsetHeight * dpr\n      setSize({ width, height })\n    }\n    getSize()\n    window.addEventListener('resize', getSize)\n    return () => window.removeEventListener('resize', getSize)\n  }, [canvasRef])\n\n  return size\n}\n\n/**\n * A wrapper that will debounce the drawing method and call the drawing method\n * asynchronously.\n *\n * @param draw A closure that calls the drawing method with the intended props.\n * @param time The time to debounce in milliseconds.\n */\nconst debounceDraw = (\n  draw: () => void | (() => void),\n  time: number\n): (() => void) => {\n  let canceled = false\n  let cleanUp: void | (() => void)\n\n  const timeout = setTimeout(async () => {\n    if (!canceled) {\n      cleanUp = draw()\n    }\n  }, time)\n\n  return () => {\n    // cancel the timeout\n    clearTimeout(timeout)\n    // set the canceled flag\n    canceled = true\n    if (cleanUp) {\n      cleanUp\n    }\n  }\n}\n\n/**\n * Provides an api for getting a 2d context from a canvas element.\n *\n * The returned reference should be assigned to a canvas element. The drawing\n * method will then be called with a context on the referenced canvas.\n *\n * Be careful about defining the drawing method. If it is defined inline, then\n * it will be re-called on every render.\n *\n * ```ts\n * // defines a new drawing function on every render\n * const Component = () => {\n *   const canvasRef = useDrawingCanvas(ctx => ctx.fillRect(0, 0, 10, 10))\n *\n *   return <canvas ref={canvasRef} />\n * }\n *\n * // safer\n * const draw = ctx => ctx.fillRect(0, 0, 10, 10)\n *\n * const Component = () => {\n *   const canvasRef = useDrawingCanvas(draw)\n *\n *   return <canvas ref={canvasRef} />\n * }\n * ```\n *\n * @param draw The drawing method\n */\nexport default function useDrawingCanvas(draw: DrawingMethod) {\n  const ref = useRef<HTMLCanvasElement>()\n  const [context, setContext] = useState<CanvasRenderingContext2D>()\n  const { width, height } = useCanvasSize(ref)\n\n  useEffect(() => {\n    if (!ref.current) return\n\n    setContext(ref.current.getContext('2d') || undefined)\n  }, [ref])\n\n  useLayoutEffect(() => {\n    if (context) {\n      context.canvas.width = width\n      context.canvas.height = height\n\n      return debounceDraw(\n        () =>\n          draw(context, {\n            width,\n            height,\n            prefersReducedMotion: !window.matchMedia(\n              '(prefers-reduced-motion: no-preferece)'\n            ).matches\n          }),\n        50\n      )\n    }\n  }, [draw, context, width, height])\n\n  return ref\n}\n","import React, { MutableRefObject } from 'react'\nimport useDrawingCanvas, {\n  DrawingMethod\n} from './react-hooks-use-drawing-canvas'\nimport './Wallpaper.css'\n\nexport type CanvasDrawingMethod = DrawingMethod\n\nexport const CanvasWallpaper: React.FC<{\n  /** extra classes for css */\n  className: string\n  draw: CanvasDrawingMethod\n  /** Render the canvas pixelated; without interpolation. Default: false */\n  pixelated?: boolean\n}> = props => {\n  const { draw, className, pixelated = false } = props\n  const canvasRef = useDrawingCanvas(draw)\n  const classNames = ['Wallpaper', 'Canvas']\n\n  if (className !== undefined) {\n    classNames.push(className)\n  }\n  if (pixelated) {\n    classNames.push('pixelated')\n  }\n\n  return (\n    <canvas\n      className={classNames.join(' ')}\n      ref={canvasRef as MutableRefObject<HTMLCanvasElement>}\n    />\n  )\n}\n","import PVector from '../common/PVector'\nimport { randomInt, randomRange } from '../common/random'\n\n/**\n * This method will produce a sampling of points in 2d space such that the\n * distance between any two points is at least r.\n *\n * @param width The width of the sample area.\n * @param height The height of the sample area.\n * @param r The minimum distance between samples.\n * @param K How many candidate points to try before deciding the point is\n * surrounded.\n */\nconst poissantDiscSampler = (\n  width: number,\n  height: number,\n  r: number,\n  startNode = new PVector(randomRange(0, width), randomRange(0, height)),\n  K = 10\n): [PVector, number[]][] => {\n  if (width < r && height < r) {\n    return []\n  }\n\n  const points: PVector[] = [startNode]\n  // Indices of the entries in points that are not processed yet\n  const unprocessed: number[] = [0]\n  // If we divide the space up into squares of this size, no two points can be\n  // in the same square.\n  const cellSize = r * Math.SQRT1_2\n  /**\n   * A 2d array that contains the indices of the sampled points.\n   * We will use it to check for other points within a certain area.\n   */\n  // const grid: number[][] = [...Array(Math.ceil(width / cellSize))].map(() =>\n  //   Array(Math.ceil(height / cellSize)).fill(-1)\n  // )\n  const grid: number[][] = []\n  const row: number[] = []\n  for (let j = 0; j < Math.ceil(height / cellSize); j++) {\n    row.push(-1)\n  }\n  for (let i = 0; i < Math.ceil(width / cellSize); i++) {\n    grid.push([...row])\n  }\n\n  // We should add the starting node to the grid\n  grid[Math.floor(startNode.x / cellSize)][\n    Math.floor(startNode.y / cellSize)\n  ] = 0\n\n  /**\n   * Produces a new PVector that is in the goldilocks zone around v.\n   *\n   * @param v The center of the annulus to sample from.\n   */\n  const generateAround = (v: PVector) => {\n    const radius = randomRange(r, r * 2)\n    const angle = randomRange(0, Math.PI * 2)\n\n    return v.add(new PVector(0, 1).rotate(angle).scale(radius))\n  }\n\n  while (unprocessed.length > 0) {\n    const p = randomInt(unprocessed.length)\n    const parent = points[unprocessed[p]]\n\n    // we now want to attempt to add a new point near parent.\n    let success = false\n    for (let attempt = 0; !success && attempt < K; attempt++) {\n      const candidate = generateAround(parent)\n      if (\n        candidate.x < 0 ||\n        candidate.x > width ||\n        candidate.y < 0 ||\n        candidate.y > height\n      ) {\n        continue\n      }\n\n      // We now need to check the 9 grid cells around the cell that other would\n      // go into to check if there are any other nodes already here.\n      const i = Math.floor(candidate.x / cellSize)\n      const j = Math.floor(candidate.y / cellSize)\n      // innocent until provn guilty\n      let isGoodCandidate = true\n      for (let di = -2; isGoodCandidate && di <= 2; di++) {\n        for (let dj = -2; isGoodCandidate && dj <= 2; dj++) {\n          if (\n            i + di < 0 ||\n            i + di >= grid.length ||\n            j + dj < 0 ||\n            j + dj >= grid[0].length\n          ) {\n            continue\n          }\n          const neighbor = grid[i + di][j + dj]\n          if (\n            // If there is another node relatively close; and,\n            neighbor >= 0 &&\n            // the distance is less than our minimum distance,\n            candidate.subtract(points[neighbor]).modulus() < r\n          ) {\n            // this candidate is not a good one.\n            isGoodCandidate = false\n          }\n        }\n      }\n      if (isGoodCandidate) {\n        // the candidate will be the next value in points, so its index will be\n        // the current length of points.\n        success = true\n        grid[i][j] = points.length\n        unprocessed.push(points.length)\n        points.push(candidate)\n      }\n    }\n    if (!success) {\n      // we want to swap the last unprocessed element with our parent element\n      unprocessed[p] = unprocessed[unprocessed.length - 1]\n      // and then remove the last element (which is now definitely our parent)\n      unprocessed.pop()\n    }\n  }\n\n  // return points\n  // now we have finished generating the points, now we want to return the\n  // points with a list of their possible neighbors\n  return points.map(p => {\n    const neighbors: number[] = []\n    const i = Math.floor(p.x / cellSize)\n    const j = Math.floor(p.y / cellSize)\n\n    for (let di = -2; di <= 2; di++) {\n      for (let dj = -2; dj <= 2; dj++) {\n        if (\n          di + dj < 0 ||\n          (di === 0 && dj === 0) ||\n          i + di < 0 ||\n          i + di >= grid.length ||\n          j + dj < 0 ||\n          j + dj >= grid[0].length\n        ) {\n          continue\n        }\n        const neighbor = grid[i + di][j + dj]\n        if (neighbor >= 0 && p.subtract(points[neighbor]).modulus() < r * 2) {\n          neighbors.push(neighbor)\n        }\n      }\n    }\n    return [p, neighbors]\n  })\n}\n\nexport default poissantDiscSampler\n","import PVector from '../common/PVector'\nimport { randomInt, randomRange } from '../common/random'\n\nexport default class WebPoint {\n  origin: PVector\n  phasor: PVector\n  phasorSpeed: number\n  pos: PVector\n  neighbors: WebPoint[]\n  hue: number\n\n  constructor(origin: PVector, phasorLength: number) {\n    this.neighbors = []\n    this.origin = origin\n    this.phasor = new PVector(0, phasorLength).rotate(\n      randomRange(0, 2 * Math.PI)\n    )\n    this.phasorSpeed = randomRange(-0.02, 0.02)\n\n    this.pos = this.origin.add(this.phasor)\n\n    this.hue = randomInt(360)\n  }\n\n  joinNeighbors(ctx: CanvasRenderingContext2D): void {\n    ctx.save()\n\n    for (const neighbor of this.neighbors) {\n      const strength = Math.min(\n        1,\n        Math.max(\n          0,\n          1 -\n            this.pos.subtract(neighbor.pos).modulus() /\n              (4 * this.phasor.modulus())\n        )\n      )\n      ctx.strokeStyle = `hsla(${this.hue},60%,80%,${strength})`\n      ctx.beginPath()\n      ctx.moveTo(this.pos.x, this.pos.y)\n      ctx.lineTo(neighbor.pos.x, neighbor.pos.y)\n      ctx.closePath()\n      ctx.stroke()\n    }\n    ctx.restore()\n  }\n\n  paint(ctx: CanvasRenderingContext2D): void {\n    ctx.save()\n    ctx.fillStyle = `hsl(${this.hue},70%,80%)`\n\n    ctx.beginPath()\n    ctx.arc(this.pos.x, this.pos.y, 3, 0, 2 * Math.PI)\n    ctx.closePath()\n    ctx.fill()\n\n    ctx.restore()\n  }\n\n  spin(): void {\n    this.phasor = this.phasor.rotate(this.phasorSpeed)\n    this.pos = this.origin.add(this.phasor)\n  }\n\n  addNeighbor(neighbor: WebPoint): void {\n    this.neighbors.push(neighbor)\n  }\n}\n","import React from 'react'\nimport { DrawingMethod } from '../common/react-hooks-use-drawing-canvas'\nimport PVector from '../common/PVector'\nimport poissantDiscSampler from '../common/poissantDiscSampler'\nimport WebPoint from './WebPoint'\nimport { CanvasWallpaper } from '../common/Wallpaper'\n\nconst draw: DrawingMethod = (ctx, options) => {\n  const { width, height } = options\n  const samples = poissantDiscSampler(\n    width,\n    height,\n    50,\n    new PVector(width / 2, height / 2)\n  )\n  const points = samples.map(([point]) => new WebPoint(point, 15))\n\n  samples.forEach((sample, i) => {\n    for (const j of sample[1]) {\n      points[i].addNeighbor(points[j])\n    }\n  })\n\n  let frame: number\n\n  const drawFrame = () => {\n    frame = requestAnimationFrame(drawFrame)\n    ctx.clearRect(0, 0, width, height)\n    points.forEach(p => {\n      p.spin()\n      p.joinNeighbors(ctx)\n    })\n    // we dont want the joining lines to cover the points\n    points.forEach(p => {\n      p.paint(ctx)\n    })\n  }\n\n  drawFrame()\n\n  return () => cancelAnimationFrame(frame)\n}\n\nexport const StarMap: React.FC = () => {\n  return <CanvasWallpaper className=\"StarMap\" draw={draw} />\n}\n\nexport default StarMap\n","/**\n * A class that represents a position vector in two dimensional space.\n * @property x The x position\n * @property y The y position\n */\nexport default class PVector {\n  /** The x-position of the vector */\n  readonly x: number\n  /** The y-position of the vector */\n  readonly y: number\n\n  /**\n   * Makes a new PVector.\n   *\n   * @param x The x position\n   * @param y The y position (defaults to be the same as the x position)\n   */\n  constructor(x: number, y: number = x) {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Applies a given action to a list of vectors component-wise.\n   *\n   * For example, to add two vectors, `a` and `b`, componentwise, we could do\n   * ```ts\n   * PVector.componentWise((aComp, bComp) => aComp + bComp, a, b)\n   * ```\n   *\n   * @param action The action to be preformed on each component\n   * @param vectors The vectors whose components will be passed to the action\n   */\n  static componentWise(\n    action: (...components: number[]) => number,\n    ...vectors: PVector[]\n  ) {\n    return new PVector(\n      action(...vectors.map(v => v.x)),\n      action(...vectors.map(v => v.y))\n    )\n  }\n  /**\n   * The same as the static method, but the first vector will be the current\n   * `this`.\n   *\n   * @param action The action to perform on each component\n   * @param extraVectors Any extra vectors to be included in the calculation\n   */\n  componentWise(\n    action: (...components: number[]) => number,\n    ...extraVectors: PVector[]\n  ) {\n    return PVector.componentWise(action, this, ...extraVectors)\n  }\n\n  /**\n   * Adds a list of vectors together component-wise.\n   *\n   * @param vectors The vectors to add\n   */\n  static add(...vectors: PVector[]) {\n    return PVector.componentWise(\n      (...components) => components.reduce((s, v) => s + v, 0),\n      ...vectors\n    )\n  }\n  /**\n   * Adds a list of vectors to the vector component-wise.\n   *\n   * @param vectors The vectors to add\n   */\n  add(...vectors: PVector[]) {\n    return PVector.add(this, ...vectors)\n  }\n\n  /**\n   * Subtracts a list of vectors from a given vector.\n   *\n   * @param from The vector that will be subtracted from\n   * @param vectors The vectors to subtract\n   */\n  static subtract(from: PVector, ...vectors: PVector[]) {\n    return PVector.componentWise(\n      (from, sum) => from - sum,\n      from,\n      PVector.add(...vectors)\n    )\n  }\n  /**\n   * Subtracts a list of vectors from the vector.\n   *\n   * @param vectors The vectors to subtract\n   */\n  subtract(...vectors: PVector[]) {\n    return PVector.subtract(this, ...vectors)\n  }\n\n  /**\n   * Returns the component-wise multiplication of the vectors.\n   *\n   * @param vectors The vectors to multiply\n   */\n  static multiply(...vectors: PVector[]) {\n    return PVector.componentWise(\n      (...components) => components.reduce((p, v) => p * v, 1),\n      ...vectors\n    )\n  }\n  /**\n   * Multiplies the vector by a list of vectors.\n   *\n   * @param vectors The vectors to multiply by\n   */\n  multiply(...vectors: PVector[]) {\n    return PVector.multiply(this, ...vectors)\n  }\n\n  /**\n   * Divides a given vector by a list of other vectors component-wise.\n   *\n   * @param dividend The vector to be divided\n   * @param divisors The vectors to divide by\n   */\n  static divide(dividend: PVector, ...divisors: PVector[]) {\n    return PVector.componentWise(\n      (dividend, divisor) => dividend / divisor,\n      dividend,\n      PVector.multiply(...divisors)\n    )\n  }\n  /**\n   * Divides the vector by a list of other vectors component-wise.\n   *\n   * @param divisors The vectors to divide by\n   */\n  divide(...divisors: PVector[]) {\n    return PVector.divide(this, ...divisors)\n  }\n\n  /** Multiplies a vector by a matrix [a b, c d], and translates by e, f. */\n  static transform(\n    vector: PVector,\n    a: number,\n    b: number,\n    c: number,\n    d: number,\n    e = 0,\n    f = 0\n  ) {\n    return new PVector(\n      vector.x * a + vector.y * c + e,\n      vector.x * b + vector.y * d + f\n    )\n  }\n  /** Multiplies the vector by a matrix [a b, c d], and translates by e, f. */\n  transform(a: number, b: number, c: number, d: number, e = 0, f = 0) {\n    return PVector.transform(this, a, b, c, d, e, f)\n  }\n\n  /** Rotates a vector by an angle. (anticlockwise in radians) */\n  static rotate(vector: PVector, theta: number) {\n    const cos = Math.cos(theta)\n    const sin = Math.sin(theta)\n    return vector.transform(cos, -sin, sin, cos, 0, 0)\n  }\n  /** Rotates the vector by an angle. (anticlockwise in radians) */\n  rotate(theta: number) {\n    return PVector.rotate(this, theta)\n  }\n\n  /** Scales a vector by a factor. */\n  static scale(vector: PVector, sf: number) {\n    return PVector.componentWise(x => sf * x, vector)\n  }\n  /** Scales the vector by a factor. */\n  scale(sf: number) {\n    return PVector.scale(this, sf)\n  }\n\n  /** Gets the modulus of a vector */\n  static modulus(vector: PVector) {\n    return Math.sqrt(vector.x * vector.x + vector.y * vector.y)\n  }\n  /** Gets the modulus of a vector */\n  modulus() {\n    return PVector.modulus(this)\n  }\n\n  /**\n   * PVectors will be compared by their lengths.\n   */\n  valueOf() {\n    return this.modulus()\n  }\n}\n"],"names":["randomInt","from","to","arguments","length","undefined","Math","floor","random","randomRange","useDrawingCanvas","draw","ref","useRef","context","setContext","useState","width","height","canvasRef","size","setSize","useEffect","getSize","current","dpr","window","devicePixelRatio","offsetWidth","offsetHeight","addEventListener","removeEventListener","useCanvasSize","getContext","useLayoutEffect","canvas","debounceDraw","time","cleanUp","canceled","timeout","setTimeout","async","clearTimeout","prefersReducedMotion","matchMedia","matches","CanvasWallpaper","props","className","pixelated","classNames","push","_jsx","join","r","startNode","PVector","K","points","unprocessed","cellSize","SQRT1_2","grid","row","j","ceil","i","x","y","generateAround","v","radius","angle","PI","add","rotate","scale","p","parent","success","attempt","candidate","isGoodCandidate","di","dj","neighbor","subtract","modulus","pop","map","neighbors","WebPoint","constructor","origin","phasorLength","phasor","phasorSpeed","pos","hue","this","joinNeighbors","ctx","save","strength","min","max","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","restore","paint","fillStyle","arc","fill","spin","addNeighbor","options","samples","poissantDiscSampler","_ref","point","frame","forEach","sample","drawFrame","requestAnimationFrame","clearRect","cancelAnimationFrame","StarMap","componentWise","action","_len","vectors","Array","_key","_len2","extraVectors","_key2","_len3","_key3","_len4","components","_key4","reduce","s","_len5","_key5","_len6","_key6","sum","_len7","_key7","multiply","_len8","_key8","_len9","_key9","_len0","_key0","divide","dividend","_len1","divisors","_key1","divisor","_len10","_key10","transform","vector","a","b","c","d","e","f","theta","cos","sin","sf","sqrt","valueOf"],"sourceRoot":""}