{"version":3,"sources":["ui/components/Social.tsx","ui/components/Wallpaper/common/PVector.ts","ui/components/Wallpaper/common/random.ts","ui/components/Wallpaper/common/Wallpaper.tsx","ui/components/Wallpaper/StarMap.tsx","index.tsx","ui/App.tsx"],"names":["IconLink","props","link","title","Icon","className","isNotLocal","test","rel","undefined","target","href","Github","FaGithub","Linkedin","FaLinkedin","Resume","FaIdBadge","Social","PVector","x","y","this","action","extraVectors","componentWise","vectors","add","subtract","multiply","divisors","divide","a","b","c","d","e","f","transform","theta","rotate","sf","scale","modulus","map","v","components","reduce","s","from","sum","p","dividend","divisor","vector","cos","Math","sin","sqrt","randomInt","to","floor","random","randomRange","CanvasWallpaper","draw","canvasRef","useDrawingCanvas","ref","WebPoint","origin","phasorLength","phasor","phasorSpeed","pos","neighbors","hue","PI","ctx","save","neighbor","strength","min","max","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","restore","fillStyle","arc","fill","push","width","height","frame","samples","r","startNode","K","points","unprocessed","cellSize","SQRT1_2","grid","Array","ceil","generateAround","radius","angle","length","parent","success","attempt","candidate","i","j","isGoodCandidate","di","dj","pop","poissantDiscSampler","point","forEach","sample","addNeighbor","drawFrame","requestAnimationFrame","clearRect","spin","joinNeighbors","paint","cancelAnimationFrame","StarMap","ReactDOM","render","useState","word","setWord","useEffect","timeout","setTimeout","clearTimeout","words","speed","document","getElementById"],"mappings":"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","file":"static/js/main.9d348222.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  FaGithub,\n  FaLinkedin,\n  FaIdBadge,\n  FaTwitter,\n  FaDev\n} from 'react-icons/fa'\nimport { IconType } from 'react-icons/lib/cjs'\nimport './Social.css'\n\nconst IconLink: React.FC<{\n  link: string\n  title: string\n  Icon: IconType\n  className?: string\n}> = props => {\n  const { link, title, Icon, className } = props\n  // if the link starts with 'http://' or 'https://', its not local.\n  const isNotLocal = /^https?:\\/\\//.test(link)\n\n  return (\n    <a\n      {...{\n        className: `Icon ${className}`,\n        rel: isNotLocal ? 'noopener noreferrer' : undefined,\n        target: '_blank',\n        href: link,\n        title\n      }}\n    >\n      <Icon />\n    </a>\n  )\n}\n\nexport const Github = () => (\n  <IconLink\n    title=\"Check out my Github\"\n    link=\"https://github.com/chrismilson\"\n    Icon={FaGithub}\n  />\n)\n\nexport const Linkedin = () => (\n  <IconLink\n    title=\"Have a look at my Linkedin\"\n    link=\"https://linkedin.com/in/chris-milson\"\n    Icon={FaLinkedin}\n  />\n)\n\nexport const Resume = () => (\n  <IconLink\n    title=\"Take a peek at my resume...\"\n    link=\"CV.pdf\"\n    Icon={FaIdBadge}\n  />\n)\n\nexport const Twitter = () => (\n  <IconLink\n    title=\"...Tweet tweet\"\n    link=\"https://twitter.com/_shlappas\"\n    Icon={FaTwitter}\n  />\n)\n\nexport const Dev = () => (\n  <IconLink\n    title=\"I have no posts here!!\"\n    link=\"https://dev.to/chrismilson\"\n    Icon={FaDev}\n  />\n)\n\nconst Social: React.FC = () => (\n  <div className=\"Social\">\n    <Github />\n    <Linkedin />\n    <Resume />\n  </div>\n)\n\nexport default Social\n","/**\n * A class that represents a position vector in two dimensional space.\n * @property x The x position\n * @property y The y position\n */\nexport default class PVector {\n  /** The x-position of the vector */\n  readonly x: number\n  /** The y-position of the vector */\n  readonly y: number\n\n  /**\n   * Makes a new PVector.\n   *\n   * @param x The x position\n   * @param y The y position (defaults to be the same as the x position)\n   */\n  constructor(x: number, y: number = x) {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Applies a given action to a list of vectors component-wise.\n   *\n   * For example, to add two vectors, `a` and `b`, componentwise, we could do\n   * ```ts\n   * PVector.componentWise((aComp, bComp) => aComp + bComp, a, b)\n   * ```\n   *\n   * @param action The action to be preformed on each component\n   * @param vectors The vectors whose components will be passed to the action\n   */\n  static componentWise(\n    action: (...components: number[]) => number,\n    ...vectors: PVector[]\n  ) {\n    return new PVector(\n      action(...vectors.map(v => v.x)),\n      action(...vectors.map(v => v.y))\n    )\n  }\n  /**\n   * The same as the static method, but the first vector will be the current\n   * `this`.\n   *\n   * @param action The action to perform on each component\n   * @param extraVectors Any extra vectors to be included in the calculation\n   */\n  componentWise(\n    action: (...components: number[]) => number,\n    ...extraVectors: PVector[]\n  ) {\n    return PVector.componentWise(action, this, ...extraVectors)\n  }\n\n  /**\n   * Adds a list of vectors together component-wise.\n   *\n   * @param vectors The vectors to add\n   */\n  static add(...vectors: PVector[]) {\n    return PVector.componentWise(\n      (...components) => components.reduce((s, v) => s + v, 0),\n      ...vectors\n    )\n  }\n  /**\n   * Adds a list of vectors to the vector component-wise.\n   *\n   * @param vectors The vectors to add\n   */\n  add(...vectors: PVector[]) {\n    return PVector.add(this, ...vectors)\n  }\n\n  /**\n   * Subtracts a list of vectors from a given vector.\n   *\n   * @param from The vector that will be subtracted from\n   * @param vectors The vectors to subtract\n   */\n  static subtract(from: PVector, ...vectors: PVector[]) {\n    return PVector.componentWise(\n      (from, sum) => from - sum,\n      from,\n      PVector.add(...vectors)\n    )\n  }\n  /**\n   * Subtracts a list of vectors from the vector.\n   *\n   * @param vectors The vectors to subtract\n   */\n  subtract(...vectors: PVector[]) {\n    return PVector.subtract(this, ...vectors)\n  }\n\n  /**\n   * Returns the component-wise multiplication of the vectors.\n   *\n   * @param vectors The vectors to multiply\n   */\n  static multiply(...vectors: PVector[]) {\n    return PVector.componentWise(\n      (...components) => components.reduce((p, v) => p * v, 1),\n      ...vectors\n    )\n  }\n  /**\n   * Multiplies the vector by a list of vectors.\n   *\n   * @param vectors The vectors to multiply by\n   */\n  multiply(...vectors: PVector[]) {\n    return PVector.multiply(this, ...vectors)\n  }\n\n  /**\n   * Divides a given vector by a list of other vectors component-wise.\n   *\n   * @param dividend The vector to be divided\n   * @param divisors The vectors to divide by\n   */\n  static divide(dividend: PVector, ...divisors: PVector[]) {\n    return PVector.componentWise(\n      (dividend, divisor) => dividend / divisor,\n      dividend,\n      PVector.multiply(...divisors)\n    )\n  }\n  /**\n   * Divides the vector by a list of other vectors component-wise.\n   *\n   * @param divisors The vectors to divide by\n   */\n  divide(...divisors: PVector[]) {\n    return PVector.divide(this, ...divisors)\n  }\n\n  /** Multiplies a vector by a matrix [a b, c d], and translates by e, f. */\n  static transform(\n    vector: PVector,\n    a: number,\n    b: number,\n    c: number,\n    d: number,\n    e = 0,\n    f = 0\n  ) {\n    return new PVector(\n      vector.x * a + vector.y * c + e,\n      vector.x * b + vector.y * d + f\n    )\n  }\n  /** Multiplies the vector by a matrix [a b, c d], and translates by e, f. */\n  transform(a: number, b: number, c: number, d: number, e = 0, f = 0) {\n    return PVector.transform(this, a, b, c, d, e, f)\n  }\n\n  /** Rotates a vector by an angle. (anticlockwise in radians) */\n  static rotate(vector: PVector, theta: number) {\n    const cos = Math.cos(theta)\n    const sin = Math.sin(theta)\n    return vector.transform(cos, -sin, sin, cos, 0, 0)\n  }\n  /** Rotates the vector by an angle. (anticlockwise in radians) */\n  rotate(theta: number) {\n    return PVector.rotate(this, theta)\n  }\n\n  /** Scales a vector by a factor. */\n  static scale(vector: PVector, sf: number) {\n    return PVector.componentWise(x => sf * x, vector)\n  }\n  /** Scales the vector by a factor. */\n  scale(sf: number) {\n    return PVector.scale(this, sf)\n  }\n\n  /** Gets the modulus of a vector */\n  static modulus(vector: PVector) {\n    return Math.sqrt(vector.x * vector.x + vector.y * vector.y)\n  }\n  /** Gets the modulus of a vector */\n  modulus() {\n    return PVector.modulus(this)\n  }\n}\n","/**\n * Returns a random integer between two numbers, or if there is only one number,\n * between zero and that number.\n *\n * @param from The lower bound\n * @param to The upper bound\n */\nexport const randomInt = (from: number, to: number = from) => {\n  if (from === to) from = 0\n  return from + Math.floor(Math.random() * (to - from))\n}\n\n/**\n * Returns a random float in a given range.\n */\nexport const randomRange = (from: number, to: number) => {\n  return from + Math.random() * (to - from)\n}\n\n/** Returns a random normally distributed float */\nexport const randomNormal = (mean = 0, stddev = 1) => {\n  let u = 0\n  let v = 0\n  while (u === 0) u = Math.random()\n  while (v === 0) v = Math.random()\n  const statistic = Math.sqrt(-2 * Math.log(u)) + Math.cos(2 * Math.PI * v)\n  return statistic * stddev + mean\n}\n","import React from 'react'\nimport useDrawingCanvas from 'react-hooks-use-drawing-canvas'\nimport './Wallpaper.css'\n\nexport type CanvasDrawingMethod = (\n  /** A drawing context on the canvas object. */\n  context: CanvasRenderingContext2D,\n  /** The width of the drawing context. */\n  width: number,\n  /** The height of the drawing context. */\n  height: number\n) => void | (() => void)\n\nexport const CanvasWallpaper: React.FC<{\n  /** extra classes for css */\n  className: string\n  draw: CanvasDrawingMethod\n}> = props => {\n  const { draw, className } = props\n  const canvasRef = useDrawingCanvas(draw)\n  return <canvas className={`Wallpaper Canvas ${className}`} ref={canvasRef} />\n}\n","import React from 'react'\nimport PVector from './common/PVector'\nimport { randomInt, randomRange } from './common/random'\nimport { CanvasWallpaper, CanvasDrawingMethod } from './common/Wallpaper'\n\n/**\n * This method will produce a sampling of points in 2d space such that the\n * distance between any two points is at least r.\n *\n * @param width The width of the sample area.\n * @param height The height of the sample area.\n * @param r The minimum distance between samples.\n * @param K How many candidate points to try before deciding the point is\n * surrounded.\n */\nconst poissantDiscSampler = (\n  width: number,\n  height: number,\n  r: number,\n  startNode = new PVector(randomRange(0, width), randomRange(0, height)),\n  K = 10\n): [PVector, number[]][] => {\n  const points: PVector[] = [startNode]\n  // Indices of the entries in points that are not processed yet\n  const unprocessed: number[] = [0]\n  // If we divide the space up into squares of this size, no two points can be\n  // in the same square.\n  const cellSize = r * Math.SQRT1_2\n  /**\n   * A 2d array that contains the indices of the sampled points.\n   * We will use it to check for other points within a certain area.\n   */\n  const grid: number[][] = [...Array(Math.ceil(width / cellSize))].map(() =>\n    Array(Math.ceil(height / cellSize)).fill(-1)\n  )\n  // We should add the starting node to the grid\n  grid[Math.floor(startNode.x / cellSize)][\n    Math.floor(startNode.y / cellSize)\n  ] = 0\n\n  /**\n   * Produces a new PVector that is in the goldilocks zone around v.\n   *\n   * @param v The center of the annulus to sample from.\n   */\n  const generateAround = (v: PVector) => {\n    const radius = randomRange(r, r * 2)\n    const angle = randomRange(0, Math.PI * 2)\n\n    return v.add(new PVector(0, 1).rotate(angle).scale(radius))\n  }\n\n  while (unprocessed.length > 0) {\n    const p = randomInt(unprocessed.length)\n    const parent = points[unprocessed[p]]\n\n    // we now want to attempt to add a new point near parent.\n    let success = false\n    for (let attempt = 0; !success && attempt < K; attempt++) {\n      const candidate = generateAround(parent)\n      if (\n        candidate.x < 0 ||\n        candidate.x > width ||\n        candidate.y < 0 ||\n        candidate.y > height\n      ) {\n        continue\n      }\n\n      // We now need to check the 9 grid cells around the cell that other would\n      // go into to check if there are any other nodes already here.\n      const i = Math.floor(candidate.x / cellSize)\n      const j = Math.floor(candidate.y / cellSize)\n      // innocent until provn guilty\n      let isGoodCandidate = true\n      for (let di = -2; isGoodCandidate && di <= 2; di++) {\n        for (let dj = -2; isGoodCandidate && dj <= 2; dj++) {\n          if (\n            i + di < 0 ||\n            i + di >= grid.length ||\n            j + dj < 0 ||\n            j + dj >= grid[0].length\n          ) {\n            continue\n          }\n          const neighbor = grid[i + di][j + dj]\n          if (\n            // If there is another node relatively close; and,\n            neighbor >= 0 &&\n            // the distance is less than our minimum distance,\n            candidate.subtract(points[neighbor]).modulus() < r\n          ) {\n            // this candidate is not a good one.\n            isGoodCandidate = false\n          }\n        }\n      }\n      if (isGoodCandidate) {\n        // the candidate will be the next value in points, so its index will be\n        // the current length of points.\n        success = true\n        grid[i][j] = points.length\n        unprocessed.push(points.length)\n        points.push(candidate)\n      }\n    }\n    if (!success) {\n      // we want to swap the last unprocessed element with our parent element\n      unprocessed[p] = unprocessed[unprocessed.length - 1]\n      // and then remove the last element (which is now definitely our parent)\n      unprocessed.pop()\n    }\n  }\n\n  // return points\n  // now we have finished generating the points, now we want to return the\n  // points with a list of their possible neighbors\n  return points.map(p => {\n    const neighbors = []\n    const i = Math.floor(p.x / cellSize)\n    const j = Math.floor(p.y / cellSize)\n\n    for (let di = -2; di <= 2; di++) {\n      for (let dj = -2; dj <= 2; dj++) {\n        if (\n          di + dj < 0 ||\n          (di === 0 && dj === 0) ||\n          i + di < 0 ||\n          i + di >= grid.length ||\n          j + dj < 0 ||\n          j + dj >= grid[0].length\n        ) {\n          continue\n        }\n        const neighbor = grid[i + di][j + dj]\n        if (neighbor >= 0 && p.subtract(points[neighbor]).modulus() < r * 2) {\n          neighbors.push(neighbor)\n        }\n      }\n    }\n    return [p, neighbors]\n  })\n}\n\nclass WebPoint {\n  origin: PVector\n  phasor: PVector\n  phasorSpeed: number\n  pos: PVector\n  neighbors: WebPoint[]\n  hue: number\n\n  constructor(origin: PVector, phasorLength: number) {\n    this.neighbors = []\n    this.origin = origin\n    this.phasor = new PVector(0, phasorLength).rotate(\n      randomRange(0, 2 * Math.PI)\n    )\n    this.phasorSpeed = randomRange(-0.02, 0.02)\n\n    this.pos = this.origin.add(this.phasor)\n\n    this.hue = randomInt(360)\n  }\n\n  joinNeighbors(ctx: CanvasRenderingContext2D) {\n    ctx.save()\n\n    for (const neighbor of this.neighbors) {\n      const strength = Math.min(\n        1,\n        Math.max(\n          0,\n          1 -\n            this.pos.subtract(neighbor.pos).modulus() /\n              (4 * this.phasor.modulus())\n        )\n      )\n      ctx.strokeStyle = `hsla(${this.hue},60%,80%,${strength})`\n      ctx.beginPath()\n      ctx.moveTo(this.pos.x, this.pos.y)\n      ctx.lineTo(neighbor.pos.x, neighbor.pos.y)\n      ctx.closePath()\n      ctx.stroke()\n    }\n    ctx.restore()\n  }\n\n  paint(ctx: CanvasRenderingContext2D) {\n    ctx.save()\n    ctx.fillStyle = `hsl(${this.hue},70%,80%)`\n\n    ctx.beginPath()\n    ctx.arc(this.pos.x, this.pos.y, 3, 0, 2 * Math.PI)\n    ctx.closePath()\n    ctx.fill()\n\n    ctx.restore()\n  }\n\n  spin() {\n    this.phasor = this.phasor.rotate(this.phasorSpeed)\n    this.pos = this.origin.add(this.phasor)\n  }\n\n  addNeighbor(neighbor: WebPoint) {\n    this.neighbors.push(neighbor)\n  }\n}\n\nconst draw: CanvasDrawingMethod = (ctx, width, height) => {\n  const samples = poissantDiscSampler(\n    width,\n    height,\n    50,\n    new PVector(width / 2, height / 2)\n  )\n  const points = samples.map(([point]) => new WebPoint(point, 15))\n\n  samples.forEach((sample, i) => {\n    for (const j of sample[1]) {\n      points[i].addNeighbor(points[j])\n    }\n  })\n\n  let frame: number\n\n  const drawFrame = () => {\n    frame = requestAnimationFrame(drawFrame)\n    ctx.clearRect(0, 0, width, height)\n    points.forEach(p => {\n      p.spin()\n      p.joinNeighbors(ctx)\n    })\n    // we dont want the joining lines to cover the points\n    points.forEach(p => {\n      p.paint(ctx)\n    })\n  }\n\n  drawFrame()\n\n  return () => cancelAnimationFrame(frame)\n}\n\nconst StarMap: React.FC = () => {\n  return <CanvasWallpaper className=\"StarMap\" draw={draw} />\n}\n\nexport default StarMap\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './ui/App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","import React, { useEffect, useState } from 'react'\nimport Social from './components/Social'\nimport Wallpaper from './components/Wallpaper/StarMap'\nimport NotTypist from 'react-not-typist'\nimport './App.css'\n\nexport default function App() {\n  const [word, setWord] = useState('My name is')\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setWord('Chris Milson')\n    }, 2000)\n    return () => clearTimeout(timeout)\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Social />\n      <h1>\n        <NotTypist words={[word]} speed={1000} />\n      </h1>\n      <Wallpaper />\n    </div>\n  )\n}\n"],"sourceRoot":""}