{"version":3,"sources":["components/Social/index.js","components/Wallpaper/Circle.js","components/Wallpaper/index.js","App.js","serviceWorker.js","index.js"],"names":["Social","props","className","title","href","target","rel","Circle","width","height","this","color","Math","floor","random","age","size","x","y","ctx","beginPath","ellipse","sqrt","PI","strokeStyle","stroke","Wallpaper","canvas","React","createRef","current","getContext","window","addEventListener","resizeTimer","clearTimeout","cancelAnimationFrame","timeout","clearRect","setTimeout","resize","removeEventListener","offsetWidth","offsetHeight","circles","length","Array","fill","map","c","drawCircles","draw","requestAnimationFrame","ref","Component","words","w","toLowerCase","App","speed","delay","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf2950ef.chunk.js","sourcesContent":["import React from 'react'\nimport { FaGithub, FaLinkedin, FaIdBadge } from 'react-icons/fa'\nimport './styles.scss'\n\nexport default function Social (props) {\n  return (\n    <div className='Social'>\n      <a\n        title='Check out my Github'\n        href='https://github.com/chrismilson'\n        target='_blank'\n        rel='noopener noreferrer'\n      ><FaGithub /></a>\n      <a\n        title='...or my Linkedin'\n        href='https://linkedin.com/in/chris-milson'\n        target='_blank'\n        rel='noopener noreferrer'\n      ><FaLinkedin /></a>\n      <a\n        title='Have a look at my CV too'\n        href='CV.pdf'\n        target='_blank'\n      ><FaIdBadge /></a>\n    </div>\n  )\n}\n","export default class Circle {\n  constructor (width, height) {\n    this.color = Math.floor(Math.random() * 256)\n    this.age = -Math.floor(Math.random() * 200)\n    this.size = Math.random() + 0.5\n\n    this.x = Math.floor(Math.random() * width)\n    this.y = Math.floor(Math.random() * height)\n  }\n\n  draw (ctx) {\n    if (this.age < 0) {\n      this.age++\n      return false\n    }\n    ctx.beginPath()\n    // by taking the square root, the area will increase uniformly\n    ctx.ellipse(\n      this.x, this.y,\n      Math.sqrt(this.age) * 10 * this.size,\n      Math.sqrt(this.age) * 10 * this.size,\n      0, 0, Math.PI * 2\n    )\n\n    ctx.strokeStyle = `hsla(\n        ${this.color},\n        100%,\n        40%,\n        ${1 - (this.age / 200)}\n      )`\n\n    ctx.stroke()\n\n    return this.age++ > 200\n  }\n}\n","import React from 'react'\nimport './styles.scss'\nimport Circle from './Circle'\n\nexport default class Wallpaper extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.canvas = React.createRef()\n  }\n\n  componentDidMount () {\n    this.ctx = this.canvas.current.getContext('2d')\n\n    window.addEventListener('resize', () => {\n      if (this.resizeTimer) {\n        clearTimeout(this.resizeTimer)\n      } else {\n        window.cancelAnimationFrame(this.timeout)\n        this.ctx.clearRect(0, 0, this.width, this.height)\n      }\n      this.resizeTimer = setTimeout(() => this.resize(), 500)\n    })\n\n    this.resize()\n  }\n\n  componentWillUnmount () {\n    window.cancelAnimationFrame(this.timeout)\n    window.removeEventListener('resize', () => this.resize())\n  }\n\n  resize () {\n    this.ctx.canvas.width = this.width = this.canvas.current.offsetWidth\n    this.ctx.canvas.height = this.height = this.canvas.current.offsetHeight\n\n    const size = Math.floor(this.width * this.height / 100000)\n    if (!this.circles || this.circles.length !== size) {\n      this.circles = new Array(size)\n        .fill(0)\n        .map(c => new Circle(this.width, this.height))\n    }\n\n    this.resizeTimer = 0\n    this.drawCircles()\n  }\n\n  drawCircles () {\n    this.ctx.clearRect(0, 0, this.width, this.height)\n    this.circles = this.circles.map(c => {\n      if (c.draw(this.ctx)) return new Circle(this.width, this.height)\n      return c\n    })\n\n    this.timeout = window.requestAnimationFrame(() => this.drawCircles())\n  }\n\n  render () {\n    return (\n      <canvas className='Wallpaper' ref={this.canvas} />\n    )\n  }\n}\n","import React from 'react'\nimport Social from './components/Social'\nimport Wallpaper from './components/Wallpaper'\nimport NotTypist from 'react-not-typist' // I wrote this\nimport './App.scss'\n\nconst words = [\n  'Global Citizen',\n  'Mathematician',\n  'Front End Developer',\n  'Back End Developer',\n  'Maker',\n  'Japanese Speaker'\n].map(w => w.toLowerCase())\n\nfunction App () {\n  return (\n    <div className='App'>\n      <h2>Chris Milson</h2>\n      <p>\n        <NotTypist speed={2000} delay={5000} words={words} />\n      </p>\n\n      <Social />\n      <Wallpaper />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// The serviceworker is supplying the user-page resources when navigating to a\n// project page. For this reason, we are disabling the service worker.\nserviceWorker.unregister()\n"],"sourceRoot":""}