{"version":3,"sources":["ui/components/Wallpaper/common/Wallpaper.tsx","ui/components/Wallpaper/common/random.ts","ui/components/Wallpaper/Perspectives/index.tsx"],"names":["CanvasWallpaper","props","draw","className","pixelated","canvasRef","useDrawingCanvas","classNames","undefined","push","join","ref","OffscreenCanvasWallpaper","initDrawingModule","useOffscreenDrawingCanvas","randomInt","from","to","Math","floor","random","randomRange","project","ctx","length","save","translate","x","y","moveTo","rotate","atan2","lineTo","restore","width","height","temp","setTransform","frame","centers","lines","offset","increment","separation","hue","lineWidth","lineCap","drawFrame","requestAnimationFrame","clearRect","strokeStyle","beginPath","forEach","center","closePath","stroke","line","cancelAnimationFrame","Perspectives"],"mappings":"qIAAA,wGAOaA,GAPb,MAaK,SAAAC,GAAU,IACLC,EAAuCD,EAAvCC,KAAMC,EAAiCF,EAAjCE,UADF,EACmCF,EAAtBG,iBADb,SAENC,EAAYC,YAAiBJ,GAC7BK,EAAa,CAAC,YAAa,UASjC,YAPkBC,IAAdL,GACFI,EAAWE,KAAKN,GAEdC,GACFG,EAAWE,KAAK,aAGX,4BAAQN,UAAWI,EAAWG,KAAK,KAAMC,IAAKN,MAG1CO,EAMR,SAAAX,GAAU,IACLE,EAA4CF,EAA5CE,UAAWU,EAAiCZ,EAAjCY,kBAAmBT,EAAcH,EAAdG,UAChCC,EAAYS,YAA0BD,GACtCN,EAAa,CAAC,YAAa,SAAU,aAS3C,YAPkBC,IAAdL,GACFI,EAAWE,KAAKN,GAEdC,GACFG,EAAWE,KAAK,aAGX,4BAAQN,UAAWI,EAAWG,KAAK,KAAMC,IAAKN,M,qDC9CvD,oEAOO,IAAMU,EAAY,SAACC,GAAqC,IAAvBC,EAAsB,uDAATD,EAEnD,OADIA,IAASC,IAAID,EAAO,GACjBA,EAAOE,KAAKC,MAAMD,KAAKE,UAAYH,EAAKD,KAMpCK,EAAc,SAACL,EAAcC,GACxC,OAAOD,EAAOE,KAAKE,UAAYH,EAAKD,K,gCChBtC,2CAKMM,EAAU,SACdC,EACAP,EACAC,EACAO,GAEAD,EAAIE,OACJF,EAAIG,UAAUV,EAAKW,EAAGX,EAAKY,GAC3BL,EAAIM,OAAO,EAAG,GACdN,EAAIO,QAAQZ,KAAKa,MAAMd,EAAGU,EAAIX,EAAKW,EAAGV,EAAGW,EAAIZ,EAAKY,IAClDL,EAAIS,OAAO,EAAGR,GACdD,EAAIU,WAGA/B,EAA4B,SAACqB,EAAD,GAA6B,IAArBW,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAC/C,GAAID,EAAQC,EAAQ,CAElB,IAAMC,EAAOF,EACbA,EAAQC,EACRA,EAASC,EACTb,EAAIc,aAAa,EAAG,EAAG,EAAG,EAAG,EAAG,GAGlC,IAgCIC,EAhCEC,EAAU,CACd,CACEZ,EAAG,EACHC,EAAGO,EAAS,GAEd,CACER,EAAGO,EACHN,EAAI,EAAIO,EAAU,IAMhBX,GAAUU,EAAQ,EAClBM,EAAQ,CACZ,CACEb,EAAI,EAAIO,EAAS,EACjBO,OAAQ,EACRC,UAPU,GAQVC,WAPe,GAQfnB,UAEF,CACEG,EAAI,EAAIO,EAAS,EACjBO,OAAQ,EACRC,WAAW,GACXC,WAde,GAefnB,WAGAoB,EAAM7B,YAAU,KAIpBQ,EAAIsB,UAAY,EAChBtB,EAAIuB,QAAU,QA4Bd,OA1BkB,SAAZC,IACJT,EAAQU,sBAAsBD,GAC9BxB,EAAI0B,UAAU,EAAG,EAAGf,EAAOC,GAC3BZ,EAAI2B,YAAJ,eAA0BN,IAA1B,qBAEArB,EAAI4B,YACJX,EAAMY,SAAQ,YAAwC,IAArCzB,EAAoC,EAApCA,EAAGc,EAAiC,EAAjCA,OAAQE,EAAyB,EAAzBA,WAAYnB,EAAa,EAAbA,OACtCe,EAAQa,SAAQ,SAAAC,GACd,IACE,IAAIzB,EAAIa,EAASE,EACjBf,EAAIO,EAASQ,EACbf,GAAKe,EAELrB,EAAQC,EAAK,CAAEI,IAAGC,KAAKyB,EAAQ7B,SAIrCD,EAAI+B,YACJ/B,EAAIgC,SACJf,EAAMY,SAAQ,SAAAI,GACZA,EAAKf,QAAUe,EAAKf,OAASe,EAAKd,WAAac,EAAKb,cAIxDI,GAEO,kBAAMU,qBAAqBnB,KAOrBoB,UAJgB,WAC7B,OAAO,kBAAC,IAAD,CAAiBvD,UAAU,eAAeD,KAAMA","file":"static/js/8.01288ff8.chunk.js","sourcesContent":["import React from 'react'\nimport useDrawingCanvas, { DrawingMethod } from 'react-hooks-use-drawing-canvas'\nimport { useOffscreenDrawingCanvas } from 'react-hooks-use-offscreen-drawing-canvas'\nimport './Wallpaper.css'\n\nexport type CanvasDrawingMethod = DrawingMethod\n\nexport const CanvasWallpaper: React.FC<{\n  /** extra classes for css */\n  className: string\n  draw: CanvasDrawingMethod\n  /** Render the canvas pixelated; without interpolation. Default: false */\n  pixelated?: boolean\n}> = props => {\n  const { draw, className, pixelated = false } = props\n  const canvasRef = useDrawingCanvas(draw)\n  const classNames = ['Wallpaper', 'Canvas']\n\n  if (className !== undefined) {\n    classNames.push(className)\n  }\n  if (pixelated) {\n    classNames.push('pixelated')\n  }\n\n  return <canvas className={classNames.join(' ')} ref={canvasRef} />\n}\n\nexport const OffscreenCanvasWallpaper: React.FC<{\n  /** extra classes for css */\n  className: string\n  initDrawingModule: () => Promise<typeof import('worker-loader!*')>\n  /** Render the canvas pixelated; without interpolation. Default: false */\n  pixelated?: boolean\n}> = props => {\n  const { className, initDrawingModule, pixelated } = props\n  const canvasRef = useOffscreenDrawingCanvas(initDrawingModule)\n  const classNames = ['Wallpaper', 'Canvas', 'Offscreen']\n\n  if (className !== undefined) {\n    classNames.push(className)\n  }\n  if (pixelated) {\n    classNames.push('pixelated')\n  }\n\n  return <canvas className={classNames.join(' ')} ref={canvasRef} />\n}\n","/**\n * Returns a random integer between two numbers, or if there is only one number,\n * between zero and that number.\n *\n * @param from The lower bound\n * @param to The upper bound\n */\nexport const randomInt = (from: number, to: number = from) => {\n  if (from === to) from = 0\n  return from + Math.floor(Math.random() * (to - from))\n}\n\n/**\n * Returns a random float in a given range.\n */\nexport const randomRange = (from: number, to: number) => {\n  return from + Math.random() * (to - from)\n}\n\n/** Returns a random normally distributed float */\nexport const randomNormal = (mean = 0, stddev = 1) => {\n  let u = 0\n  let v = 0\n  while (u === 0) u = Math.random()\n  while (v === 0) v = Math.random()\n  const statistic = Math.sqrt(-2 * Math.log(u)) + Math.cos(2 * Math.PI * v)\n  return statistic * stddev + mean\n}\n","import React from 'react'\nimport { CanvasWallpaper, CanvasDrawingMethod } from '../common/Wallpaper'\nimport { randomInt } from '../common/random'\n\n/** Project a line of a set length from a point */\nconst project = (\n  ctx: CanvasRenderingContext2D,\n  from: { x: number; y: number },\n  to: { x: number; y: number },\n  length: number\n) => {\n  ctx.save()\n  ctx.translate(from.x, from.y)\n  ctx.moveTo(0, 0)\n  ctx.rotate(-Math.atan2(to.x - from.x, to.y - from.y))\n  ctx.lineTo(0, length)\n  ctx.restore()\n}\n\nconst draw: CanvasDrawingMethod = (ctx, { width, height }) => {\n  if (width < height) {\n    // portrait! rotate.\n    const temp = width\n    width = height\n    height = temp\n    ctx.setTransform(0, 1, 1, 0, 0, 0)\n  }\n\n  const centers = [\n    {\n      x: 0,\n      y: height / 4\n    },\n    {\n      x: width,\n      y: (3 * height) / 4\n    }\n  ]\n\n  const speed = 0.3\n  const separation = 30\n  const length = -width / 7\n  const lines = [\n    {\n      x: (2 * width) / 9,\n      offset: 0,\n      increment: speed,\n      separation,\n      length\n    },\n    {\n      x: (7 * width) / 9,\n      offset: 0,\n      increment: -2 * speed,\n      separation,\n      length\n    }\n  ]\n  let hue = randomInt(360)\n\n  let frame: number\n\n  ctx.lineWidth = 3\n  ctx.lineCap = 'round'\n\n  const drawFrame = () => {\n    frame = requestAnimationFrame(drawFrame)\n    ctx.clearRect(0, 0, width, height)\n    ctx.strokeStyle = `hsla(${hue++}, 100%, 40%, 0.6)`\n\n    ctx.beginPath()\n    lines.forEach(({ x, offset, separation, length }) => {\n      centers.forEach(center => {\n        for (\n          let y = offset - separation;\n          y < height + separation;\n          y += separation\n        ) {\n          project(ctx, { x, y }, center, length)\n        }\n      })\n    })\n    ctx.closePath()\n    ctx.stroke()\n    lines.forEach(line => {\n      line.offset = (line.offset + line.increment) % line.separation\n    })\n  }\n\n  drawFrame()\n\n  return () => cancelAnimationFrame(frame)\n}\n\nconst Perspectives: React.FC = () => {\n  return <CanvasWallpaper className=\"Perspectives\" draw={draw} />\n}\n\nexport default Perspectives\n"],"sourceRoot":""}