{"version":3,"sources":["ui/components/Social.tsx","ui/components/Wallpaper/common/Wallpaper.tsx","ui/components/Wallpaper/common/PVector.ts","ui/components/Wallpaper/common/random.ts","ui/components/Wallpaper/Circles.tsx","ui/components/Wallpaper/Perspectives.tsx","ui/components/Wallpaper/BouncyBalls.tsx","ui/components/Wallpaper/GameOfLife.tsx","ui/components/Wallpaper/Dragon.tsx","ui/components/Wallpaper/index.ts","index.tsx","ui/App.tsx"],"names":["IconLink","props","link","title","Icon","className","isNotLocal","test","rel","undefined","target","href","Github","FaGithub","Linkedin","FaLinkedin","Resume","FaIdBadge","Social","CanvasWallpaper","draw","canvasRef","useDrawingCanvas","ref","PVector","x","y","this","action","extraVectors","componentWise","vectors","add","subtract","multiply","divisors","divide","a","b","c","d","e","f","transform","theta","rotate","sf","scale","map","v","components","reduce","s","from","sum","p","dividend","divisor","vector","cos","Math","sin","randomInt","to","floor","random","randomRange","Circle","position","hue","age","maxAge","size","ctx","path","Path2D","arc","canvas","width","height","PI","save","strokeStyle","stroke","restore","resetIfNeeded","frame","circles","i","push","drawFrame","requestAnimationFrame","clearRect","forEach","cancelAnimationFrame","Circles","project","length","translate","moveTo","atan2","lineTo","temp","setTransform","centers","lines","offset","increment","separation","lineWidth","lineCap","beginPath","center","closePath","line","Perspectives","Ball","min","max","radius","fillStyle","fill","hit","abs","numBalls","balls","ball","move","BouncyBalls","Cell","initiallyAlive","status","neighbors","neighbor","n","isAlive","Game","board","j","dx","dy","addNeighbor","fillRect","row","cell","check","swap","widthPX","heightPX","globalAlpha","game","interval","setInterval","clearInterval","GameOfLife","Slider","value","change","onChange","isTop","isBottom","Scale","start","end","next","o","mid","t","Dragon","x1","y1","x2","y2","head","depth","current","split","join","diff","deeper","shallower","trace","portrait","dragon","reverse","allWallpapers","ReactDOM","render","useState","word","setWord","useEffect","timeout","setTimeout","clearTimeout","words","speed","document","getElementById"],"mappings":"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","file":"static/js/main.6545c127.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  FaGithub,\n  FaLinkedin,\n  FaIdBadge,\n  FaTwitter,\n  FaDev\n} from 'react-icons/fa'\nimport { IconType } from 'react-icons/lib/cjs'\nimport './Social.css'\n\nconst IconLink: React.FC<{\n  link: string\n  title: string\n  Icon: IconType\n  className?: string\n}> = props => {\n  const { link, title, Icon, className } = props\n  // if the link starts with 'http://' or 'https://', its not local.\n  const isNotLocal = /^https?:\\/\\//.test(link)\n\n  return (\n    <a\n      {...{\n        className: `Icon ${className}`,\n        rel: isNotLocal ? 'noopener noreferrer' : undefined,\n        target: '_blank',\n        href: link,\n        title\n      }}\n    >\n      <Icon />\n    </a>\n  )\n}\n\nexport const Github = () => (\n  <IconLink\n    title=\"Check out my Github\"\n    link=\"https://github.com/chrismilson\"\n    Icon={FaGithub}\n  />\n)\n\nexport const Linkedin = () => (\n  <IconLink\n    title=\"Have a look at my Linkedin\"\n    link=\"https://linkedin.com/in/chris-milson\"\n    Icon={FaLinkedin}\n  />\n)\n\nexport const Resume = () => (\n  <IconLink\n    title=\"Take a peek at my resume...\"\n    link=\"CV.pdf\"\n    Icon={FaIdBadge}\n  />\n)\n\nexport const Twitter = () => (\n  <IconLink\n    title=\"...Tweet tweet\"\n    link=\"https://twitter.com/_shlappas\"\n    Icon={FaTwitter}\n  />\n)\n\nexport const Dev = () => (\n  <IconLink\n    title=\"I have no posts here!!\"\n    link=\"https://dev.to/chrismilson\"\n    Icon={FaDev}\n  />\n)\n\nconst Social: React.FC = () => (\n  <div className=\"Social\">\n    <Github />\n    <Linkedin />\n    <Resume />\n  </div>\n)\n\nexport default Social\n","import React from 'react'\nimport useDrawingCanvas from 'react-hooks-use-drawing-canvas'\nimport './Wallpaper.css'\n\nexport type CanvasDrawingMethod = (\n  /** A drawing context on the canvas object. */\n  context: CanvasRenderingContext2D,\n  /** The width of the drawing context. */\n  width: number,\n  /** The height of the drawing context. */\n  height: number\n) => void | (() => void)\n\nexport const CanvasWallpaper: React.FC<{\n  /** extra classes for css */\n  className: string\n  draw: CanvasDrawingMethod\n}> = props => {\n  const { draw, className } = props\n  const canvasRef = useDrawingCanvas(draw)\n  return <canvas className={`Wallpaper Canvas ${className}`} ref={canvasRef} />\n}\n","/**\n * A class that represents a position vector in two dimensional space.\n *\n * @param x The x position\n * @param y The y position (defaults to be the same as the x position)\n */\nexport default class PVector {\n  /** The x-position of the vector */\n  readonly x: number\n  /** The y-position of the vector */\n  readonly y: number\n\n  constructor(x: number, y: number = x) {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Applies a given action to a list of vectors component-wise.\n   *\n   * For example, to add two vectors, `a` and `b`, componentwise, we could do\n   * ```ts\n   * PVector.componentWise((aComp, bComp) => aComp + bComp, a, b)\n   * ```\n   *\n   * @param action The action to be preformed on each component\n   * @param vectors The vectors whose components will be passed to the action\n   */\n  static componentWise(\n    action: (...components: number[]) => number,\n    ...vectors: PVector[]\n  ) {\n    return new PVector(\n      action(...vectors.map(v => v.x)),\n      action(...vectors.map(v => v.y))\n    )\n  }\n  /**\n   * The same as the static method, but the first vector will be the current\n   * `this`.\n   *\n   * @param action The action to perform on each component\n   * @param extraVectors Any extra vectors to be included in the calculation\n   */\n  componentWise(\n    action: (...components: number[]) => number,\n    ...extraVectors: PVector[]\n  ) {\n    return PVector.componentWise(action, this, ...extraVectors)\n  }\n\n  /**\n   * Adds a list of vectors together component-wise.\n   *\n   * @param vectors The vectors to add\n   */\n  static add(...vectors: PVector[]) {\n    return PVector.componentWise(\n      (...components) => components.reduce((s, v) => s + v, 0),\n      ...vectors\n    )\n  }\n  /**\n   * Adds a list of vectors to the vector component-wise.\n   *\n   * @param vectors The vectors to add\n   */\n  add(...vectors: PVector[]) {\n    return PVector.add(this, ...vectors)\n  }\n\n  /**\n   * Subtracts a list of vectors from a given vector.\n   *\n   * @param from The vector that will be subtracted from\n   * @param vectors The vectors to subtract\n   */\n  static subtract(from: PVector, ...vectors: PVector[]) {\n    return PVector.componentWise(\n      (from, sum) => from - sum,\n      from,\n      PVector.add(...vectors)\n    )\n  }\n  /**\n   * Subtracts a list of vectors from the vector.\n   *\n   * @param vectors The vectors to subtract\n   */\n  subtract(...vectors: PVector[]) {\n    return PVector.subtract(this, ...vectors)\n  }\n\n  /**\n   * Returns the component-wise multiplication of the vectors.\n   *\n   * @param vectors The vectors to multiply\n   */\n  static multiply(...vectors: PVector[]) {\n    return PVector.componentWise(\n      (...components) => components.reduce((p, v) => p * v, 1),\n      ...vectors\n    )\n  }\n  /**\n   * Multiplies the vector by a list of vectors.\n   *\n   * @param vectors The vectors to multiply by\n   */\n  multiply(...vectors: PVector[]) {\n    return PVector.multiply(this, ...vectors)\n  }\n\n  /**\n   * Divides a given vector by a list of other vectors component-wise.\n   *\n   * @param dividend The vector to be divided\n   * @param divisors The vectors to divide by\n   */\n  static divide(dividend: PVector, ...divisors: PVector[]) {\n    return PVector.componentWise(\n      (dividend, divisor) => dividend / divisor,\n      dividend,\n      PVector.multiply(...divisors)\n    )\n  }\n  /**\n   * Divides the vector by a list of other vectors component-wise.\n   *\n   * @param divisors The vectors to divide by\n   */\n  divide(...divisors: PVector[]) {\n    return PVector.divide(this, ...divisors)\n  }\n\n  /** Multiplies a vector by a matrix [a b, c d], and translates by e, f. */\n  static transform(\n    vector: PVector,\n    a: number,\n    b: number,\n    c: number,\n    d: number,\n    e = 0,\n    f = 0\n  ) {\n    return new PVector(\n      vector.x * a + vector.y * c + e,\n      vector.x * b + vector.y * d + f\n    )\n  }\n  /** Multiplies the vector by a matrix [a b, c d], and translates by e, f. */\n  transform(a: number, b: number, c: number, d: number, e = 0, f = 0) {\n    return PVector.transform(this, a, b, c, d, e, f)\n  }\n\n  /** Rotates a vector by an angle. (anticlockwise in radians) */\n  static rotate(vector: PVector, theta: number) {\n    const cos = Math.cos(theta)\n    const sin = Math.sin(theta)\n    return vector.transform(cos, -sin, sin, cos, 0, 0)\n  }\n  /** Rotates the vector by an angle. (anticlockwise in radians) */\n  rotate(theta: number) {\n    return PVector.rotate(this, theta)\n  }\n\n  /** Scales a vector by a factor. */\n  static scale(vector: PVector, sf: number) {\n    return PVector.componentWise(x => sf * x, vector)\n  }\n  /** Scales the vector by a factor. */\n  scale(sf: number) {\n    return PVector.scale(this, sf)\n  }\n}\n","/**\n * Returns a random integer between two numbers, or if there is only one number,\n * between zero and that number.\n *\n * @param from The lower bound\n * @param to The upper bound\n */\nexport const randomInt = (from: number, to: number = from) => {\n  if (from === to) from = 0\n  return from + Math.floor(Math.random() * (to - from))\n}\n\n/**\n * Returns a random float in a given range.\n */\nexport const randomRange = (from: number, to: number) => {\n  return from + Math.random() * (to - from)\n}\n\n/** Returns a random normally distributed float */\nexport const randomNormal = (mean = 0, stddev = 1) => {\n  let u = 0\n  let v = 0\n  while (u === 0) u = Math.random()\n  while (v === 0) v = Math.random()\n  const statistic = Math.sqrt(-2 * Math.log(u)) + Math.cos(2 * Math.PI * v)\n  return statistic * stddev + mean\n}\n","import React from 'react'\nimport { CanvasWallpaper, CanvasDrawingMethod } from './common/Wallpaper'\nimport PVector from './common/PVector'\nimport { randomInt, randomRange } from './common/random'\n\n/** A class representing a circle on the screen. */\nclass Circle {\n  static maxAge = 200\n  private position = new PVector(Math.random(), Math.random())\n  private hue = randomInt(360)\n  /**\n   * The age of the circle. A negative number represents an\n   * unborn circle\n   */\n  private age = -randomInt(2 * Circle.maxAge)\n  private size = randomRange(0.5, 1.5)\n\n  private resetIfNeeded() {\n    if (this.age > Circle.maxAge) {\n      this.position = new PVector(Math.random(), Math.random())\n      this.hue = randomInt(360)\n      this.age = -randomInt(Circle.maxAge)\n      this.size = randomRange(0.5, 1.5)\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    if (this.age >= 0) {\n      const path = new Path2D()\n      path.arc(\n        ctx.canvas.width * this.position.x,\n        ctx.canvas.height * this.position.y,\n        this.age * this.size,\n        0,\n        2 * Math.PI\n      )\n\n      ctx.save()\n      ctx.strokeStyle = `hsla(${this.hue}, 100%, 40%, ${1 -\n        this.age / Circle.maxAge})`\n      ctx.stroke(path)\n      ctx.restore()\n\n      this.resetIfNeeded()\n    }\n    this.age++\n  }\n}\n\nconst draw: CanvasDrawingMethod = (ctx, width, height) => {\n  const circles: Circle[] = []\n  for (let i = 0; i < (width * height) / 100000; i++) {\n    circles.push(new Circle())\n  }\n\n  let frame: number\n\n  const drawFrame = () => {\n    frame = requestAnimationFrame(drawFrame)\n    ctx.clearRect(0, 0, width, height)\n    circles.forEach(c => c.draw(ctx))\n  }\n\n  drawFrame()\n  return () => cancelAnimationFrame(frame)\n}\n\n/**\n * A wallpaper component that draws nice circles to the screen.\n */\nconst Circles: React.FC = () => {\n  return <CanvasWallpaper className=\"Circles\" draw={draw} />\n}\n\nexport default Circles\n","import React from 'react'\nimport { CanvasWallpaper, CanvasDrawingMethod } from './common/Wallpaper'\nimport { randomInt } from './common/random'\n\n/** Project a line of a set length from a point */\nconst project = (\n  ctx: CanvasRenderingContext2D,\n  from: { x: number; y: number },\n  to: { x: number; y: number },\n  length: number\n) => {\n  ctx.save()\n  ctx.translate(from.x, from.y)\n  ctx.moveTo(0, 0)\n  ctx.rotate(-Math.atan2(to.x - from.x, to.y - from.y))\n  ctx.lineTo(0, length)\n  ctx.restore()\n}\n\nconst draw: CanvasDrawingMethod = (ctx, width, height) => {\n  if (width < height) {\n    // portrait! rotate.\n    const temp = width\n    width = height\n    height = temp\n    ctx.setTransform(0, 1, 1, 0, 0, 0)\n  }\n\n  const centers = [\n    {\n      x: 0,\n      y: height / 4\n    },\n    {\n      x: width,\n      y: (3 * height) / 4\n    }\n  ]\n\n  const speed = 0.3\n  const separation = 30\n  const length = -width / 7\n  const lines = [\n    {\n      x: (2 * width) / 9,\n      offset: 0,\n      increment: speed,\n      separation,\n      length\n    },\n    {\n      x: (7 * width) / 9,\n      offset: 0,\n      increment: -2 * speed,\n      separation,\n      length\n    }\n  ]\n  let hue = randomInt(360)\n\n  let frame: number\n\n  ctx.lineWidth = 3\n  ctx.lineCap = 'round'\n\n  const drawFrame = () => {\n    frame = requestAnimationFrame(drawFrame)\n    ctx.clearRect(0, 0, width, height)\n    ctx.strokeStyle = `hsla(${hue++}, 100%, 40%, 0.6)`\n\n    ctx.beginPath()\n    lines.forEach(({ x, offset, separation, length }) => {\n      centers.forEach(center => {\n        for (\n          let y = offset - separation;\n          y < height + separation;\n          y += separation\n        ) {\n          project(ctx, { x, y }, center, length)\n        }\n      })\n    })\n    ctx.closePath()\n    ctx.stroke()\n    lines.forEach(line => {\n      line.offset = (line.offset + line.increment) % line.separation\n    })\n  }\n\n  drawFrame()\n\n  return () => cancelAnimationFrame(frame)\n}\n\nconst Perspectives: React.FC = () => {\n  return <CanvasWallpaper className=\"Perspectives\" draw={draw} />\n}\n\nexport default Perspectives\n","import React from 'react'\nimport { CanvasWallpaper, CanvasDrawingMethod } from './common/Wallpaper'\nimport PVector from './common/PVector'\nimport { randomInt, randomRange } from './common/random'\n\nclass Ball {\n  /** The displacement of the ball */\n  private s: PVector\n  /** The velocity of the ball */\n  private v: PVector\n  /** The bottom left corner of the ball's bounding box */\n  private min: PVector\n  /** The top right corner of the ball's bounding box */\n  private max: PVector\n  /** The radius of the ball */\n  private radius: number\n  /** The hue of the ball */\n  private hue: number\n\n  constructor(\n    min: PVector,\n    max: PVector,\n    radius = Math.min(max.x - min.x, max.y - min.y, 20 + Math.random() * 20)\n  ) {\n    this.s = new PVector(\n      randomRange(min.x + radius, max.x - radius),\n      randomRange(min.y + radius, max.y - radius)\n    )\n    this.v = new PVector(1 + Math.random() * 3, 1 + Math.random() * 3).multiply(\n      new PVector(randomInt(2) || -1, randomInt(2) || -1)\n    )\n    this.radius = radius\n    this.min = min\n    this.max = max.add(min.multiply(new PVector(-1)))\n    this.hue = randomInt(360)\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.save()\n\n    ctx.beginPath()\n    ctx.arc(\n      this.min.x + this.s.x,\n      this.min.y + this.s.y,\n      this.radius,\n      0,\n      2 * Math.PI\n    )\n    ctx.closePath()\n\n    ctx.fillStyle = `hsla(${this.hue}, 100%, 40%, 0.6)`\n    ctx.fill()\n\n    ctx.restore()\n  }\n\n  move() {\n    const hit = PVector.componentWise(\n      (s, v, max) =>\n        Math.abs(Math.floor((s + v - this.radius) / (max - 2 * this.radius))),\n      this.s,\n      this.v,\n      this.max\n    )\n    if (hit.x | hit.y) this.hue = randomInt(360)\n\n    this.s = this.s\n      // apply velocity\n      .add(this.v)\n\n    this.v = this.v\n      // bounce off walls\n      .multiply(new PVector(1).subtract(hit.multiply(new PVector(2))))\n      // lose momentum on any wall hit\n      // .multiply(new PVector(1 - 0.1 * (hit.x + hit.y)))\n      // add gravity\n      .add(new PVector(0, 0.1 * (1 - hit.y)))\n  }\n}\n\nconst draw: CanvasDrawingMethod = (ctx, width, height) => {\n  const numBalls = (width * height) / 50000\n  const balls: Ball[] = []\n  for (let i = 0; i < numBalls; i++) {\n    balls.push(new Ball(new PVector(0, 0), new PVector(width, height)))\n  }\n  let frame: number\n\n  const drawFrame = () => {\n    frame = requestAnimationFrame(drawFrame)\n    ctx.clearRect(0, 0, width, height)\n\n    balls.forEach(ball => {\n      ball.draw(ctx)\n      ball.move()\n    })\n  }\n\n  drawFrame()\n  return () => {\n    cancelAnimationFrame(frame)\n  }\n}\n\nconst BouncyBalls: React.FC = () => (\n  <CanvasWallpaper className=\"BouncyBalls\" draw={draw} />\n)\n\nexport default BouncyBalls\n","import React from 'react'\nimport { CanvasWallpaper, CanvasDrawingMethod } from './common/Wallpaper'\nimport { randomInt } from './common/random'\n\nclass Cell {\n  private status: number\n  private neighbors: Cell[] = []\n\n  constructor(initiallyAlive: boolean) {\n    this.status = initiallyAlive ? 1 : 0\n  }\n\n  get isAlive() {\n    return this.status & 1\n  }\n\n  swap() {\n    this.status ^= 1\n  }\n\n  addNeighbor(neighbor: Cell) {\n    this.neighbors.push(neighbor)\n  }\n\n  check() {\n    const liveNeighbors = this.neighbors.reduce((s, n) => s + n.isAlive, 0)\n\n    if ((liveNeighbors | this.status) === 3) this.status |= 2\n  }\n\n  age() {\n    this.status = this.status >> 1\n  }\n}\n\nclass Game {\n  private width: number\n  private height: number\n  /**\n   * A cell is a number representing different states.\n   * The bits from least significan to most significant mean:\n   * - The cells current status.\n   * - The cells next status.\n   */\n  private board: Cell[][]\n\n  constructor(width: number, height: number) {\n    this.width = Math.floor(width)\n    this.height = Math.floor(height)\n    this.board = []\n\n    const probabilityOfLife = 0.1\n    for (let i = 0; i < this.width; i++) {\n      this.board[i] = []\n      for (let j = 0; j < this.height; j++) {\n        this.board[i][j] = new Cell(Math.random() < probabilityOfLife)\n      }\n    }\n\n    // addd the cell's neighbors\n    for (let i = 0; i < this.width; i++) {\n      for (let j = 0; j < this.height; j++) {\n        for (const [dx, dy] of [\n          [-1, -1],\n          [-1, 0],\n          [-1, 1],\n          [0, -1],\n          [0, 1],\n          [1, -1],\n          [1, 0],\n          [1, 1]\n        ]) {\n          const x = (i + dx + this.width) % this.width\n          const y = (j + dy + this.height) % this.height\n          this.board[i][j].addNeighbor(this.board[x][y])\n        }\n      }\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    for (let i = 0; i < this.width; i++) {\n      for (let j = 0; j < this.height; j++) {\n        if (this.board[i][j].isAlive) {\n          ctx.save()\n          ctx.fillStyle = `hsl(${randomInt(360)},100%,40%)`\n          ctx.fillRect(i, j, 1, 1)\n          ctx.restore()\n        }\n      }\n    }\n  }\n\n  move() {\n    this.board.forEach(row => row.forEach(cell => cell.check()))\n    this.board.forEach(row => row.forEach(cell => cell.age()))\n\n    const randomSwaps = 5\n    for (let i = 0; i < randomSwaps; i++) {\n      this.board[randomInt(this.width)][randomInt(this.height)].swap()\n    }\n  }\n}\n\nconst draw: CanvasDrawingMethod = (ctx, widthPX, heightPX) => {\n  // transform the canvas\n  const ratio = 4\n  const width = widthPX / ratio\n  const height = heightPX / ratio\n  ctx.setTransform(ratio, 0, 0, ratio, 0, 0)\n  ctx.globalAlpha = 0.2\n\n  const game = new Game(width, height)\n\n  const draw = () => {\n    ctx.clearRect(0, 0, width, height)\n\n    game.draw(ctx)\n    game.move()\n  }\n\n  const interval = setInterval(draw, 100)\n  return () => {\n    clearInterval(interval)\n  }\n}\n\nconst GameOfLife: React.FC = () => (\n  <CanvasWallpaper className=\"GameOfLife\" draw={draw} />\n)\n\nexport default GameOfLife\n","import React from 'react'\nimport { CanvasWallpaper, CanvasDrawingMethod } from './common/Wallpaper'\nimport PVector from './common/PVector'\nimport { randomInt } from './common/random'\n\nclass Slider {\n  value: number\n  change: number\n  min: number\n  max: number\n  onChange?: (isTop: boolean) => void\n\n  constructor(\n    value: number,\n    change: number,\n    min: number,\n    max: number,\n    onChange?: (isTop: boolean) => void\n  ) {\n    this.value = value\n    this.change = change\n    this.min = min\n    this.max = max\n    this.onChange = onChange\n  }\n\n  next() {\n    const isTop = this.value + this.change > this.max\n    const isBottom = this.value + this.change < this.min\n    if (isTop || isBottom) {\n      if (this.onChange) this.onChange(isTop)\n      this.change *= -1\n    }\n    this.value += this.change\n  }\n}\n\nclass Scale {\n  start: PVector\n  end: PVector\n\n  next?: Scale\n\n  constructor(start: PVector, end: PVector) {\n    this.start = start\n    this.end = end\n  }\n\n  private mid(o: number) {\n    // cubic bezier\n    const t = (3 * (1 - o) + o) * o * o\n    const theta = (t * Math.PI) / 4\n\n    const cos = Math.cos(theta)\n    const sin = Math.sin(theta)\n    const sf = 1 / (2 * cos)\n\n    return this.start.add(\n      this.end\n        .subtract(this.start)\n        .transform(cos, -sin, sin, cos)\n        .scale(sf)\n    )\n  }\n\n  split() {\n    const temp = this.next\n    this.next = new Scale(this.end, this.mid(1))\n    this.end = this.mid(1)\n    this.next.next = temp\n  }\n\n  join() {\n    if (this.next) {\n      this.end = this.next.start\n      this.next = this.next.next\n    }\n  }\n\n  trace(ctx: CanvasRenderingContext2D, t = 0) {\n    const { start, end } = this\n    const mid = this.mid(t)\n    ctx.moveTo(start.x, start.y)\n    ctx.lineTo(mid.x, mid.y)\n    ctx.lineTo(end.x, end.y)\n  }\n}\n\nclass Dragon {\n  head: Scale\n  depth = 0\n\n  constructor(x1: number, y1: number, x2: number, y2: number) {\n    this.head = new Scale(new PVector(x1, y1), new PVector(x2, y2))\n  }\n\n  deeper() {\n    this.depth += 1\n    let current: Scale | undefined = this.head\n    while (current) {\n      current.split()\n      current = current.next?.next\n    }\n  }\n\n  shallower() {\n    this.depth -= 1\n    let current: Scale | undefined = this.head\n    while (current) {\n      current.join()\n      current = current.next\n    }\n  }\n\n  trace(ctx: CanvasRenderingContext2D, depth: number) {\n    let diff = Math.floor(depth - this.depth)\n    while (diff-- > 0) this.deeper()\n    while (diff++ < 0) this.shallower()\n\n    const offset = depth - Math.floor(depth)\n\n    let current: Scale | undefined = this.head\n    while (current) {\n      current.trace(ctx, offset)\n      current = current.next\n    }\n  }\n}\n\nconst draw: CanvasDrawingMethod = (ctx, width, height) => {\n  let portrait = false\n  if (width < height) {\n    const temp = width\n    width = height\n    height = temp\n    ctx.setTransform(0, 1, 1, 0, 0, 0)\n    portrait = true\n  }\n\n  const dragon = new Dragon(0, 0, 0, height / 2)\n  let reverse = false\n\n  const depth = new Slider(2, 0.01, 2, 9, isTop => {\n    if (isTop) return\n    reverse = !reverse\n  })\n\n  let hue = randomInt(0, 360)\n  const translate = width / 5\n  ctx.globalAlpha = 0.5\n\n  let frame: number\n  const drawFrame = () => {\n    frame = requestAnimationFrame(drawFrame)\n    ctx.clearRect(0, 0, width, height)\n    ctx.beginPath()\n\n    ctx.save()\n    if (reverse) ctx.transform(0.8, 0, 0, -0.8, width / 10, (7 * height) / 10)\n    else ctx.transform(0.8, 0, 0, 0.8, width / 10, (3 * height) / 10)\n\n    ctx.save()\n    ctx.translate(translate, 0)\n    ctx.scale(-1, 1)\n    dragon.trace(ctx, depth.value)\n    ctx.save()\n    ctx.translate(0, height / 2)\n    ctx.scale(-1, -1)\n    dragon.trace(ctx, depth.value)\n    ctx.restore()\n    ctx.restore()\n\n    ctx.save()\n    ctx.translate(width - translate, 0)\n    if (portrait) ctx.scale(-1, 1)\n    dragon.trace(ctx, depth.value)\n    ctx.save()\n    ctx.translate(0, height / 2)\n    ctx.scale(-1, -1)\n    dragon.trace(ctx, depth.value)\n    ctx.restore()\n    ctx.restore()\n\n    ctx.restore()\n    ctx.strokeStyle = `hsl(${hue},100%,40%)`\n    hue = (hue + 1) % 360\n    ctx.stroke()\n\n    depth.next()\n  }\n\n  drawFrame()\n  return () => cancelAnimationFrame(frame)\n}\n\nconst DragonCurve: React.FC = () => {\n  return <CanvasWallpaper className=\"Dragon\" draw={draw} />\n}\n\nexport default DragonCurve\n","import Circles from './Circles'\nimport Perspectives from './Perspectives'\nimport BouncyBalls from './BouncyBalls'\nimport GameOfLife from './GameOfLife'\nimport Dragon from './Dragon'\n\nconst allWallpapers = [Circles, Perspectives, BouncyBalls, GameOfLife, Dragon]\n\nexport default allWallpapers[Math.floor(Math.random() * allWallpapers.length)]\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './ui/App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","import React, { useEffect, useState } from 'react'\nimport Social from './components/Social'\nimport Wallpaper from './components/Wallpaper'\nimport NotTypist from 'react-not-typist'\nimport './App.css'\n\nexport default function App() {\n  const [word, setWord] = useState('My name is')\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setWord('Chris Milson')\n    }, 2000)\n    return () => clearTimeout(timeout)\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Social />\n      <h1>\n        <NotTypist words={[word]} speed={1000} />\n      </h1>\n      <Wallpaper />\n    </div>\n  )\n}\n"],"sourceRoot":""}