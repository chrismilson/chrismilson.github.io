{"version":3,"sources":["ui/components/Wallpaper/common/Wallpaper.tsx","ui/components/Wallpaper/common/random.ts","ui/components/Wallpaper/YinYang/layer.ts","ui/components/Wallpaper/YinYang/index.tsx"],"names":["CanvasWallpaper","props","draw","className","pixelated","canvasRef","useDrawingCanvas","classNames","undefined","push","join","ref","OffscreenCanvasWallpaper","initDrawingModule","useOffscreenDrawingCanvas","randomInt","from","to","Math","floor","random","randomRange","layer","ctx","radius","angle","primaryStyle","secondaryStyle","save","rotate","beginPath","arc","PI","closePath","fillStyle","fill","half","translate","restore","width","height","max","min","frame","hue","drawFrame","requestAnimationFrame","clearRect","cancelAnimationFrame","YinYang"],"mappings":"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","file":"static/js/9.91b8c31b.chunk.js","sourcesContent":["import React from 'react'\nimport useDrawingCanvas, { DrawingMethod } from 'react-hooks-use-drawing-canvas'\nimport { useOffscreenDrawingCanvas } from 'react-hooks-use-offscreen-drawing-canvas'\nimport './Wallpaper.css'\n\nexport type CanvasDrawingMethod = DrawingMethod\n\nexport const CanvasWallpaper: React.FC<{\n  /** extra classes for css */\n  className: string\n  draw: CanvasDrawingMethod\n  /** Render the canvas pixelated; without interpolation. Default: false */\n  pixelated?: boolean\n}> = props => {\n  const { draw, className, pixelated = false } = props\n  const canvasRef = useDrawingCanvas(draw)\n  const classNames = ['Wallpaper', 'Canvas']\n\n  if (className !== undefined) {\n    classNames.push(className)\n  }\n  if (pixelated) {\n    classNames.push('pixelated')\n  }\n\n  return <canvas className={classNames.join(' ')} ref={canvasRef} />\n}\n\nexport const OffscreenCanvasWallpaper: React.FC<{\n  /** extra classes for css */\n  className: string\n  initDrawingModule: () => Promise<typeof import('worker-loader!*')>\n  /** Render the canvas pixelated; without interpolation. Default: false */\n  pixelated?: boolean\n}> = props => {\n  const { className, initDrawingModule, pixelated } = props\n  const canvasRef = useOffscreenDrawingCanvas(initDrawingModule)\n  const classNames = ['Wallpaper', 'Canvas', 'Offscreen']\n\n  if (className !== undefined) {\n    classNames.push(className)\n  }\n  if (pixelated) {\n    classNames.push('pixelated')\n  }\n\n  return <canvas className={classNames.join(' ')} ref={canvasRef} />\n}\n","/**\n * Returns a random integer between two numbers, or if there is only one number,\n * between zero and that number.\n *\n * @param from The lower bound\n * @param to The upper bound\n */\nexport const randomInt = (from: number, to: number = from) => {\n  if (from === to) from = 0\n  return from + Math.floor(Math.random() * (to - from))\n}\n\n/**\n * Returns a random float in a given range.\n */\nexport const randomRange = (from: number, to: number) => {\n  return from + Math.random() * (to - from)\n}\n\n/** Returns a random normally distributed float */\nexport const randomNormal = (mean = 0, stddev = 1) => {\n  let u = 0\n  let v = 0\n  while (u === 0) u = Math.random()\n  while (v === 0) v = Math.random()\n  const statistic = Math.sqrt(-2 * Math.log(u)) + Math.cos(2 * Math.PI * v)\n  return statistic * stddev + mean\n}\n","// by changing these factors, the pattern will evolve differently\nconst leftFactor = 1\nconst rightFactor = 1\n\nconst layer = (\n  ctx: CanvasRenderingContext2D,\n  radius: number,\n  angle: number,\n  primaryStyle: string | CanvasGradient | CanvasPattern,\n  secondaryStyle: string | CanvasGradient | CanvasPattern\n): void => {\n  // draw semicircles and go deeper\n  ctx.save()\n  ctx.rotate(angle)\n\n  // primary colour\n  ctx.beginPath()\n  ctx.arc(0, 0, radius, 0, Math.PI)\n  ctx.closePath()\n  ctx.fillStyle = primaryStyle\n  ctx.fill()\n\n  // secondary color\n  ctx.beginPath()\n  ctx.arc(0, 0, radius, 0, Math.PI, true)\n  ctx.closePath()\n  ctx.fillStyle = secondaryStyle\n  ctx.fill()\n\n  if (radius < 30) {\n    const half = radius / 2\n    // bigger circles\n    ctx.beginPath()\n    ctx.arc(-half, 0, half, 0, 2 * Math.PI)\n    ctx.closePath()\n\n    ctx.fillStyle = primaryStyle\n    ctx.fill()\n\n    ctx.beginPath()\n    ctx.arc(half, 0, half, 0, 2 * Math.PI)\n    ctx.closePath()\n\n    ctx.fillStyle = secondaryStyle\n    ctx.fill()\n\n    // small circles\n    ctx.beginPath()\n    ctx.arc(-half, 0, half / 2, 0, 2 * Math.PI)\n    ctx.closePath()\n\n    ctx.fillStyle = secondaryStyle\n    ctx.fill()\n\n    ctx.beginPath()\n    ctx.arc(half, 0, half / 2, 0, 2 * Math.PI)\n    ctx.closePath()\n\n    ctx.fillStyle = primaryStyle\n    ctx.fill()\n  } else {\n    ctx.translate(-radius / 2, 0)\n    layer(ctx, radius / 2, leftFactor * angle, primaryStyle, secondaryStyle)\n\n    ctx.translate(radius, 0)\n    layer(ctx, radius / 2, rightFactor * angle, primaryStyle, secondaryStyle)\n  }\n\n  ctx.restore()\n}\n\nexport default layer\n","import React from 'react'\nimport { CanvasWallpaper, CanvasDrawingMethod } from '../common/Wallpaper'\nimport { randomInt } from '../common/random'\nimport layer from './layer'\n\nconst draw: CanvasDrawingMethod = (ctx, { width, height }) => {\n  const radius = Math.max(20, Math.min(width / 2, height / 2) - 20)\n\n  ctx.translate(width / 2, height / 2)\n\n  let hue = randomInt(0, 360)\n  let angle = 0\n\n  let frame: number\n  const drawFrame = () => {\n    frame = requestAnimationFrame(drawFrame)\n    ctx.clearRect(-width / 2, -height / 2, width, height)\n    const primaryStyle = `hsl(${hue},100%,40%)`\n    const secondaryStyle = `hsl(${hue + 180}, 100%,40%)`\n    layer(ctx, radius, angle, primaryStyle, secondaryStyle)\n\n    ctx.save()\n    ctx.beginPath()\n    ctx.arc(0, 0, radius, 0, 2 * Math.PI)\n    ctx.closePath()\n    ctx.fillStyle = 'rgba(255,255,255,0.45)'\n    ctx.fill()\n    ctx.restore()\n\n    hue = (hue + 0.2) % 360\n    angle = angle + 0.005\n  }\n\n  drawFrame()\n\n  return () => cancelAnimationFrame(frame)\n}\n\nconst YinYang: React.FC = () => {\n  return <CanvasWallpaper className=\"YinYang\" draw={draw} />\n}\n\nexport default YinYang\n"],"sourceRoot":""}